
==================== FINAL INTERFACE ====================
2019-06-15 23:18:32.374909937 UTC

interface HaskTiger-0.1.0.0-E2V2C9MNTGC8IfNMs3zKtJ:TigerFrame 8043
  interface hash: 26eac4f33784f583aae6c9ea4ff9f53f
  ABI hash: 7eb51d7d5a91c47548394ac765842900
  export-list hash: 4cbd6d04df00e4af1800a132015f446c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 84a707957232ceed2ddebd5ca4ca265a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerFrame.allocArg
  TigerFrame.allocLocal
  TigerFrame.argsGap
  TigerFrame.argsInicial
  TigerFrame.auxexp
  TigerFrame.calldefs
  TigerFrame.defaultFrame
  TigerFrame.exp
  TigerFrame.externalCall
  TigerFrame.fp
  TigerFrame.fpPrev
  TigerFrame.fpPrevLev
  TigerFrame.localsGap
  TigerFrame.localsInicial
  TigerFrame.log2WSz
  TigerFrame.newFrame
  TigerFrame.prepFormals
  TigerFrame.regInicial
  TigerFrame.rv
  TigerFrame.sepFrag
  TigerFrame.sp
  TigerFrame.specialregs
  TigerFrame.wSz
  TigerFrame.Access{TigerFrame.InFrame TigerFrame.InReg}
  TigerFrame.Frag{TigerFrame.AString TigerFrame.Proc}
  TigerFrame.Frame{TigerFrame.Frame actualArg actualLocal actualReg formals locals name}
module dependencies: State TigerAbs TigerSymbol TigerTemp TigerTree
                     TigerUnique
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 mtl-2.2.2 syb-0.7 text-1.2.3.0
                      transformers-0.5.5.0
orphans: HaskTiger-0.1.0.0-E2V2C9MNTGC8IfNMs3zKtJ:TigerUnique
         transformers-0.5.5.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.0:Data.Text
import  -/  TigerAbs 039cda3126c7cc999dbdd3c9a8fcaa0d
  exports: 7916be92b0d3730e8979910ab1e541e2
  Escapa 31fed0262e967b4890b0c5882ae6a820
  Escapa e3f65af3a49221270bc3669d293e8d45
  NoEscapa 33ea8a6aaeea3bda4aad8f6d4f800d41
import  -/  TigerSymbol 4628943ae21548f9838cca1c81589f49
  exports: 3aa8690c7d65c85b2775cbd880ffcd19
  Symbol 80a54d65275119c925e5daf83dc9ca3b
import  -/  TigerTemp de3b8ff373a73b9b291ae6f59a678eef
  exports: 2391c2332908a7f3d5d168a67d1d057d
  Label 810eccfebde2d22bfef77a99189c28f8
  TLGenerator 06fb3118757bb0edd6823bcd9f2c4373
  Temp f852c724a423eccf145b757fe1ec3232
  newTemp ebce54941f4449ea6c0c652b1b271a60
import  -/  TigerTree 7948b47c28cc775bb6841a6d0b3c4ee5
  exports: 575bc60858dbed47a8fffd063cdf6ddc
  Binop eb04fae5bc7de9295793159f76854a38
  Call a09b2da616823b3e041648d0eca62272
  Const 8b8e2b668a15e4299dd60885acad3828
  Exp a27a57fa78085f075826b7b43c634615
  Mem 3393c26be3bcf2f893e2ec204e35cdb0
  Name de6e7695d1fc73c82fc9536acf1b0a63
  Plus d4217976a5aefc32b1ff25af374dcca8
  Stm a27a57fa78085f075826b7b43c634615
  Temp 7d157cc0764ac74ac92d91bc174db05f
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  text-1.2.3.0:Data.Text 4f359e32d6f1c9011b171e00ff8fb023
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
521e7240b5bb364b6731231b04ff90b8
  $fShowAccess :: GHC.Show.Show TigerFrame.Access
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerFrame.Access
                  TigerFrame.$fShowAccess_$cshowsPrec
                  TigerFrame.$fShowAccess_$cshow
                  TigerFrame.$fShowAccess_$cshowList -}
521e7240b5bb364b6731231b04ff90b8
  $fShowAccess1 :: TigerFrame.Access -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: TigerFrame.Access) (w1 :: GHC.Base.String) ->
                 TigerFrame.$w$cshowsPrec 0# w w1) -}
378fa0880e4360b27a705e1bd19591a6
  $fShowAccess2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("InReg "#) -}
7bc5a415a663171089970bee32aa07f9
  $fShowAccess3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("InFrame "#) -}
521e7240b5bb364b6731231b04ff90b8
  $fShowAccess_$cshow :: TigerFrame.Access -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: TigerFrame.Access) ->
                 case x of wild {
                   TigerFrame.InFrame b1
                   -> GHC.CString.unpackAppendCString#
                        TigerFrame.$fShowAccess3
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   TigerFrame.InReg b1
                   -> GHC.CString.unpackAppendCString#
                        TigerFrame.$fShowAccess2
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 }) }) -}
521e7240b5bb364b6731231b04ff90b8
  $fShowAccess_$cshowList :: [TigerFrame.Access] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [TigerFrame.Access]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TigerFrame.Access
                   TigerFrame.$fShowAccess1
                   ls
                   s) -}
521e7240b5bb364b6731231b04ff90b8
  $fShowAccess_$cshowsPrec ::
    GHC.Types.Int -> TigerFrame.Access -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TigerFrame.Access)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 TigerFrame.$w$cshowsPrec ww1 w1 w2 }) -}
41864f388235f25303204a3930172f8b
  $fShowFrag :: GHC.Show.Show TigerFrame.Frag
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerFrame.Frag
                  TigerFrame.$fShowFrag_$cshowsPrec
                  TigerFrame.$fShowFrag_$cshow
                  TigerFrame.$fShowFrag_$cshowList -}
41864f388235f25303204a3930172f8b
  $fShowFrag1 ::
    TigerFrame.Frag -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: TigerFrame.Frag) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (TigerFrame.$fShowFrag_$cshow x))
                   s) -}
0a84fd64e0f576ad11a4f7d4e4ac1852
  $fShowFrag2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (":\n"#) -}
bbb5fbfe7983f7fe269282f81f931ce2
  $fShowFrag3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\n'#) -}
a478b124618d2a794f6a88627c501d2e
  $fShowFrag4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Frame:"#) -}
41864f388235f25303204a3930172f8b
  $fShowFrag_$cshow :: TigerFrame.Frag -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: TigerFrame.Frag) ->
                 case ds of wild {
                   TigerFrame.Proc s f2
                   -> GHC.CString.unpackAppendCString#
                        TigerFrame.$fShowFrag4
                        (case f2 of ww { TigerFrame.Frame ww1 ww2 ww3 ww4 ww5 ww6 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           (TigerFrame.$w$cshowsPrec1
                              0#
                              ww1
                              ww2
                              ww3
                              ww4
                              ww5
                              ww6
                              (GHC.Types.[] @ GHC.Types.Char))
                           (GHC.Types.:
                              @ GHC.Types.Char
                              TigerFrame.$fShowFrag3
                              (TigerTree.$w$cshowsPrec3 0# s (GHC.Types.[] @ GHC.Types.Char))) })
                   TigerFrame.AString l ts
                   -> case Data.Text.Show.$w$cshow l of ww { (#,#) ww1 ww2 ->
                      GHC.Base.++_$s++
                        @ GHC.Types.Char
                        (GHC.CString.unpackAppendCString#
                           TigerFrame.$fShowFrag2
                           (TigerFrame.$fShowFrag_go ts))
                        ww1
                        ww2 } }) -}
41864f388235f25303204a3930172f8b
  $fShowFrag_$cshowList :: [TigerFrame.Frag] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [TigerFrame.Frag]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TigerFrame.Frag
                   TigerFrame.$fShowFrag1
                   ls
                   s) -}
41864f388235f25303204a3930172f8b
  $fShowFrag_$cshowsPrec ::
    GHC.Types.Int -> TigerFrame.Frag -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: TigerFrame.Frag)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (TigerFrame.$fShowFrag_$cshow x))
                   s) -}
1b8df608796970c00d9d4563e7c42043
  $fShowFrag_go :: [Data.Text.Internal.Text] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
78e2e978d2a586083c89fa1eff5036c1
  $fShowFrame :: GHC.Show.Show TigerFrame.Frame
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerFrame.Frame
                  TigerFrame.$fShowFrame_$cshowsPrec
                  TigerFrame.$fShowFrame_$cshow
                  TigerFrame.$fShowFrame_$cshowList -}
78e2e978d2a586083c89fa1eff5036c1
  $fShowFrame1 :: TigerFrame.Frame -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(1*U(U,U,U),1*U,1*U,1*U(U),1*U(U),1*U(U))><L,U>,
     Unfolding: (\ (w :: TigerFrame.Frame) (w1 :: GHC.Base.String) ->
                 case w of ww { TigerFrame.Frame ww1 ww2 ww3 ww4 ww5 ww6 ->
                 TigerFrame.$w$cshowsPrec1 0# ww1 ww2 ww3 ww4 ww5 ww6 w1 }) -}
78e2e978d2a586083c89fa1eff5036c1
  $fShowFrame_$cshow :: TigerFrame.Frame -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U,U,U),1*U,1*U,1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TigerFrame.Frame) ->
                 TigerFrame.$fShowFrame_$cshowsPrec
                   TigerFrame.localsInicial
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
78e2e978d2a586083c89fa1eff5036c1
  $fShowFrame_$cshowList :: [TigerFrame.Frame] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [TigerFrame.Frame]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TigerFrame.Frame
                   TigerFrame.$fShowFrame1
                   ls
                   s) -}
78e2e978d2a586083c89fa1eff5036c1
  $fShowFrame_$cshowsPrec ::
    GHC.Types.Int -> TigerFrame.Frame -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U,1*U,1*U(U),1*U(U),1*U(U))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TigerFrame.Frame)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { TigerFrame.Frame ww3 ww4 ww5 ww6 ww7 ww8 ->
                 TigerFrame.$w$cshowsPrec1 ww1 ww3 ww4 ww5 ww6 ww7 ww8 w2 } }) -}
139f14c766227e5ef3151e538170d44c
  $tc'AString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14731559525993895121##
                   17200157251095579221##
                   TigerFrame.$trModule
                   TigerFrame.$tc'AString2
                   0#
                   TigerFrame.$tc'AString1) -}
d4a76a4cfb95d83d3c938fdc221d633f
  $tc'AString1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1c75eb1a20eb4c7f8dfdb5591f0ffb81
  $tc'AString2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tc'AString3) -}
9733463cd964788e63bf2e25ffd98ed4
  $tc'AString3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AString"#) -}
da535855a3c557f0f5dc1278c4d9464d
  $tc'Frame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2711734768164597710##
                   16768376822898851545##
                   TigerFrame.$trModule
                   TigerFrame.$tc'Frame2
                   0#
                   TigerFrame.$tc'Frame1) -}
e534bdc828ad3b4748a02d1e423f919d
  $tc'Frame1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
aa90ebbb5548275d53099ea259279ef9
  $tc'Frame2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tc'Frame3) -}
db5f57ccf7deb27dbe3ce7afa9315fb6
  $tc'Frame3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Frame"#) -}
e2a87c5892ded326d40c74028a9cddc9
  $tc'InFrame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17448665058429319804##
                   7032150831910525866##
                   TigerFrame.$trModule
                   TigerFrame.$tc'InFrame2
                   0#
                   TigerFrame.$tc'InFrame1) -}
8b39e47fd275b275d72d6055e7c2529b
  $tc'InFrame1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3be8c6e94bcacd674d0261a772f80d1c
  $tc'InFrame2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tc'InFrame3) -}
d0a8237bb6f3f9b4f5737ae73e299c40
  $tc'InFrame3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InFrame"#) -}
dbd5f435f09e12a693cbdb8579e7118d
  $tc'InReg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14819497167216115481##
                   6631993341039438753##
                   TigerFrame.$trModule
                   TigerFrame.$tc'InReg2
                   0#
                   TigerFrame.$tc'InReg1) -}
89ceb0b80e73ba1551ee3a29cba06601
  $tc'InReg1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
60c9d2c5fc917410f4dde3d1e7f3f0d4
  $tc'InReg2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tc'InReg3) -}
e5cf168c27ac981678b3dbdce769f44b
  $tc'InReg3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InReg"#) -}
58bf502e079b98585a780c3e185dbac6
  $tc'Proc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2179535053471035031##
                   8975842846949995526##
                   TigerFrame.$trModule
                   TigerFrame.$tc'Proc2
                   0#
                   TigerFrame.$tc'Proc1) -}
610119c00de5b7e7b5c04de6503d642c
  $tc'Proc1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a8cbfcc2371c7e21d9801134acc4bffe
  $tc'Proc2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tc'Proc3) -}
4076f471fc105b0bb7c8f760322be8b3
  $tc'Proc3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Proc"#) -}
6c637acd1da0c6cfee052b53379da059
  $tcAccess :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7807252392154355403##
                   11531536534176738321##
                   TigerFrame.$trModule
                   TigerFrame.$tcAccess1
                   0#
                   GHC.Types.krep$*) -}
552f78f6cb587876d5c00313df2f9aac
  $tcAccess1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tcAccess2) -}
a2a2a193edec5cfffeba979573647d74
  $tcAccess2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Access"#) -}
d3bad942164b07dba543e55858502338
  $tcFrag :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14091016813732099550##
                   6162802337931492698##
                   TigerFrame.$trModule
                   TigerFrame.$tcFrag1
                   0#
                   GHC.Types.krep$*) -}
f4abe6ac4bd94d305d3d1262e5ccfd98
  $tcFrag1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tcFrag2) -}
620e8a1d6b4eb73aa508592759147376
  $tcFrag2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Frag"#) -}
1562bfef239cabf55ab71446859cc919
  $tcFrame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4540938124294203730##
                   14334892891113062692##
                   TigerFrame.$trModule
                   TigerFrame.$tcFrame1
                   0#
                   GHC.Types.krep$*) -}
96421c258be326d98cabafe31d548da0
  $tcFrame1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$tcFrame2) -}
a0ddaad6b3a9209655591e54df5f9f9e
  $tcFrame2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Frame"#) -}
c6ea85e8d4fae0c93fb6c20636d5a2fd
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerFrame.$trModule3
                   TigerFrame.$trModule1) -}
13881ee688df5663a8eb1d1242c5dc0f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$trModule2) -}
8dfd1c33434ecf9f49b6c5b925a09a62
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TigerFrame"#) -}
13d1da80e0b46839b931a76b55d16078
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerFrame.$trModule4) -}
d353208beaad4cc6fad227ff9ef4c8fa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HaskTiger-0.1.0.0-E2V2C9MNTGC8IfNMs3zKtJ"#) -}
521e7240b5bb364b6731231b04ff90b8
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> TigerFrame.Access -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: TigerFrame.Access)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   TigerFrame.InFrame b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             TigerFrame.$fShowAccess3
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                TigerFrame.$fShowAccess3
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   TigerFrame.InReg b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             TigerFrame.$fShowAccess2
                             (case Data.Text.Show.$w$cshowsPrec b1 w1 of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                TigerFrame.$fShowAccess2
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) } }) -}
92d726669f8a1d03fc6a1ac24b419bae
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> TigerSymbol.Symbol
    -> [TigerAbs.Escapa]
    -> [TigerAbs.Escapa]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 8,
     Strictness: <S,U><L,1*U(U,U,U)><L,1*U><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0] -}
02bbffafa50da75644113fe3857f95a9
  $wauxexp :: GHC.Prim.Int# -> TigerTree.Exp
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
48cfa827aed862fcebe846521428c6f0
  $wgo ::
    [TigerAbs.Escapa]
    -> GHC.Types.Int -> [TigerFrame.Access] -> [TigerFrame.Access]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U(U)><L,U>,
     Inline: [0] -}
cd9e906644ba55ab5ec033a77bdde598
  $wgo1 ::
    [TigerFrame.Frag]
    -> [TigerFrame.Frag]
    -> [(TigerTree.Stm, TigerFrame.Frame)]
    -> ([TigerFrame.Frag], [(TigerTree.Stm, TigerFrame.Frame)])
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U>m,
     Inline: [0] -}
34afa7ec2ec8e4dd6c1fc7dece373410
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
235a9384a2cd913cf420a8197bc7843e
  $wprepFormals :: [TigerAbs.Escapa] -> [TigerFrame.Access]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [TigerAbs.Escapa]) ->
                 TigerFrame.$wgo
                   ww
                   TigerFrame.localsInicial
                   (GHC.Types.[] @ TigerFrame.Access)) -}
b3960685b2796ee8ff226191e8267df2
  $wsepFrag ::
    [TigerFrame.Frag]
    -> (# [TigerFrame.Frag], [(TigerTree.Stm, TigerFrame.Frame)] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (w :: [TigerFrame.Frag]) ->
                 let {
                   ds :: ([TigerFrame.Frag], [(TigerTree.Stm, TigerFrame.Frame)])
                   = TigerFrame.$wgo1
                       w
                       (GHC.Types.[] @ TigerFrame.Frag)
                       (GHC.Types.[] @ (TigerTree.Stm, TigerFrame.Frame))
                 } in
                 (# case ds of wild { (,) ass stmss ->
                    GHC.List.reverse1
                      @ TigerFrame.Frag
                      ass
                      (GHC.Types.[] @ TigerFrame.Frag) },
                    case ds of wild { (,) ass stmss ->
                    GHC.List.reverse1
                      @ (TigerTree.Stm, TigerFrame.Frame)
                      stmss
                      (GHC.Types.[] @ (TigerTree.Stm, TigerFrame.Frame)) } #)) -}
521e7240b5bb364b6731231b04ff90b8
  data Access = InFrame GHC.Types.Int | InReg TigerTemp.Temp
41864f388235f25303204a3930172f8b
  data Frag
    = Proc TigerTree.Stm TigerFrame.Frame
    | AString TigerTemp.Label [TigerSymbol.Symbol]
78e2e978d2a586083c89fa1eff5036c1
  data Frame
    = Frame {name :: TigerSymbol.Symbol,
             formals :: [TigerAbs.Escapa],
             locals :: [TigerAbs.Escapa],
             actualArg :: GHC.Types.Int,
             actualLocal :: GHC.Types.Int,
             actualReg :: GHC.Types.Int}
78e2e978d2a586083c89fa1eff5036c1
  actualArg :: TigerFrame.Frame -> GHC.Types.Int
  RecSel Left TigerFrame.Frame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerFrame.Frame) ->
                 case ds of wild { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
78e2e978d2a586083c89fa1eff5036c1
  actualLocal :: TigerFrame.Frame -> GHC.Types.Int
  RecSel Left TigerFrame.Frame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerFrame.Frame) ->
                 case ds of wild { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
78e2e978d2a586083c89fa1eff5036c1
  actualReg :: TigerFrame.Frame -> GHC.Types.Int
  RecSel Left TigerFrame.Frame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerFrame.Frame) ->
                 case ds of wild { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
62bb45e6219237e47e1568754d560a34
  allocArg ::
    (GHC.Base.Monad w, TigerTemp.TLGenerator w) =>
    TigerFrame.Frame
    -> TigerAbs.Escapa -> w (TigerFrame.Frame, TigerFrame.Access)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U(A,1*C1(C1(U)),A,C(U),A)><L,1*U(1*U,A)><L,U(U,U,U,U(U),U,U)><S,1*U>,
     Unfolding: (\ @ w :: * -> *
                   ($dMonad :: GHC.Base.Monad w)
                   ($dTLGenerator :: TigerTemp.TLGenerator w)
                   (fr :: TigerFrame.Frame)
                   (ds :: TigerAbs.Escapa) ->
                 case ds of wild {
                   TigerAbs.Escapa
                   -> let {
                        actual :: GHC.Types.Int
                        = case fr of wild1 { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                          ds4 }
                      } in
                      GHC.Base.return
                        @ w
                        $dMonad
                        @ (TigerFrame.Frame, TigerFrame.Access)
                        (case fr of wild1 { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                         TigerFrame.Frame
                           ds1
                           ds2
                           ds3
                           (case actual of wild2 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# x 1#) })
                           ds5
                           ds6 },
                         TigerFrame.InFrame
                           (case actual of wild1 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# (GHC.Prim.*# x 4#) 4#) }))
                   TigerAbs.NoEscapa
                   -> GHC.Base.>>=
                        @ w
                        $dMonad
                        @ TigerTemp.Temp
                        @ (TigerFrame.Frame, TigerFrame.Access)
                        (TigerTemp.newTemp @ w $dTLGenerator)
                        (\ (s :: TigerTemp.Temp) ->
                         GHC.Base.return
                           @ w
                           $dMonad
                           @ (TigerFrame.Frame, TigerFrame.Access)
                           (fr, TigerFrame.InReg s)) }) -}
1e19a171375ecd4027ec332c7af2e5e8
  allocLocal ::
    (GHC.Base.Monad w, TigerTemp.TLGenerator w) =>
    TigerFrame.Frame
    -> TigerAbs.Escapa -> w (TigerFrame.Frame, TigerFrame.Access)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U(A,1*C1(C1(U)),A,C(U),A)><L,1*U(1*U,A)><L,U(U,U,U,U,U(U),U)><S,1*U>,
     Unfolding: (\ @ w :: * -> *
                   ($dMonad :: GHC.Base.Monad w)
                   ($dTLGenerator :: TigerTemp.TLGenerator w)
                   (fr :: TigerFrame.Frame)
                   (ds :: TigerAbs.Escapa) ->
                 case ds of wild {
                   TigerAbs.Escapa
                   -> let {
                        actual :: GHC.Types.Int
                        = case fr of wild1 { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                          ds5 }
                      } in
                      GHC.Base.return
                        @ w
                        $dMonad
                        @ (TigerFrame.Frame, TigerFrame.Access)
                        (case fr of wild1 { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                         TigerFrame.Frame
                           ds1
                           ds2
                           ds3
                           ds4
                           (case actual of wild2 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# x 1#) })
                           ds6 },
                         TigerFrame.InFrame
                           (case actual of wild1 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# (GHC.Prim.*# x 4#) 4#) }))
                   TigerAbs.NoEscapa
                   -> GHC.Base.>>=
                        @ w
                        $dMonad
                        @ TigerTemp.Temp
                        @ (TigerFrame.Frame, TigerFrame.Access)
                        (TigerTemp.newTemp @ w $dTLGenerator)
                        (\ (s :: TigerTemp.Temp) ->
                         GHC.Base.return
                           @ w
                           $dMonad
                           @ (TigerFrame.Frame, TigerFrame.Access)
                           (fr, TigerFrame.InReg s)) }) -}
e9fcfdc9efcb9b7ef6f40d6107415372
  argsGap :: GHC.Types.Int
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) TigerFrame.wSz -}
b9a75dccd4b64936a85a204476ac0e4a
  argsInicial :: GHC.Types.Int
  {- Strictness: m, Unfolding: (TigerFrame.localsInicial) -}
f94a12784369cdb8839eaecf749f8ef5
  auxexp :: GHC.Types.Int -> TigerTree.Exp
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> TigerFrame.$wauxexp ww1 }) -}
d1dc3866fc6817c8fd7a51d969469458
  calldefs :: [TigerTemp.Temp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTemp.Temp
                   TigerFrame.rv
                   (GHC.Types.[] @ TigerTemp.Temp)) -}
42a5685980aee5cf353d56bda898255a
  defaultFrame :: TigerFrame.Frame
  {- Strictness: m,
     Unfolding: (TigerFrame.Frame
                   Data.Text.Internal.empty
                   (GHC.Types.[] @ TigerAbs.Escapa)
                   (GHC.Types.[] @ TigerAbs.Escapa)
                   TigerFrame.localsInicial
                   TigerFrame.localsInicial
                   TigerFrame.regInicial) -}
1d05e9a79446325eb0923bf17ebcca54
  exp :: TigerFrame.Access -> GHC.Types.Int -> TigerTree.Exp
  {- Arity: 2, Strictness: <S,1*U><L,1*U(1*U)>,
     Unfolding: (\ (ds :: TigerFrame.Access) (e :: GHC.Types.Int) ->
                 case ds of wild {
                   TigerFrame.InFrame k
                   -> TigerTree.Mem
                        (TigerTree.Binop
                           TigerTree.Plus
                           (TigerFrame.auxexp e)
                           (TigerTree.Const k))
                   TigerFrame.InReg l
                   -> case e of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT -> TigerTree.Temp l 0# -> TigerFrame.exp1 } } }) -}
9bf9b3444abf7c3e49077a21d5b557b4
  exp1 :: TigerTree.Exp
  {- Strictness: x -}
e8196929996dbb687f9292202b4e0642
  externalCall :: GHC.Base.String -> [TigerTree.Exp] -> TigerTree.Exp
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 TigerTree.Call
                   (TigerTree.Name
                      (case GHC.Magic.runRW#
                              @ ('GHC.Types.TupleRep
                                   '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                              @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.newByteArray#
                                      @ GHC.Prim.RealWorld
                                      10#
                                      s1 of ds1 { (#,#) ipv ipv1 ->
                               TigerFrame.$wouter ipv1 4# s 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                       ipv1 }))) -}
78e2e978d2a586083c89fa1eff5036c1
  formals :: TigerFrame.Frame -> [TigerAbs.Escapa]
  RecSel Left TigerFrame.Frame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerFrame.Frame) ->
                 case ds of wild { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
822fa762c3eb7707381c45f629e66727
  fp :: TigerTemp.Temp
  {- Unfolding: (Data.Text.Show.unpackCString# TigerFrame.fp1) -}
1edc3c12d8bdb252df29c3070be72f34
  fp1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FP"#) -}
2f5821709e11770353170d2b9b5e9b7e
  fpPrev :: GHC.Types.Int
  {- Strictness: m, Unfolding: (TigerFrame.localsInicial) -}
108bb47950db261601abecc01969443b
  fpPrevLev :: GHC.Types.Int
  {- Strictness: m, Unfolding: (TigerFrame.localsInicial) -}
78e2e978d2a586083c89fa1eff5036c1
  locals :: TigerFrame.Frame -> [TigerAbs.Escapa]
  RecSel Left TigerFrame.Frame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerFrame.Frame) ->
                 case ds of wild { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
1495aab5e0ebc1669f8c223807965bb6
  localsGap :: GHC.Types.Int
  {- Strictness: m, Unfolding: (TigerFrame.wSz) -}
57e475144b504297df8d2469e11623e9
  localsInicial :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
39b1a4f345d0094aa5be84b9420207ce
  log2WSz :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
78e2e978d2a586083c89fa1eff5036c1
  name :: TigerFrame.Frame -> TigerSymbol.Symbol
  RecSel Left TigerFrame.Frame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U(U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerFrame.Frame) ->
                 case ds of wild { TigerFrame.Frame ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
570796828bb8612e170fc2f7eb895dfc
  newFrame ::
    TigerSymbol.Symbol -> [TigerAbs.Escapa] -> TigerFrame.Frame
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (nm :: TigerSymbol.Symbol) (fs :: [TigerAbs.Escapa]) ->
                 TigerFrame.Frame
                   nm
                   fs
                   (GHC.Types.[] @ TigerAbs.Escapa)
                   TigerFrame.localsInicial
                   TigerFrame.localsInicial
                   TigerFrame.regInicial) -}
19014ed06565c446f7a7f29c46802399
  prepFormals :: TigerFrame.Frame -> [TigerFrame.Access]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TigerFrame.Frame) ->
                 case w of ww { TigerFrame.Frame ww1 ww2 ww3 ww4 ww5 ww6 ->
                 TigerFrame.$wprepFormals ww2 }) -}
ea8a3e3c8383f6ffb9d37b24c1c96ec0
  regInicial :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
95a2375365aefea7cbd6a05fc4845f73
  rv :: TigerTemp.Temp
  {- Unfolding: (Data.Text.Show.unpackCString# TigerFrame.rv1) -}
6c870f4e9b179a0e8c6ec8037464d101
  rv1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RV"#) -}
6ee7ae3c1c7ee352a3d7d17fe8114038
  sepFrag ::
    [TigerFrame.Frag]
    -> ([TigerFrame.Frag], [(TigerTree.Stm, TigerFrame.Frame)])
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [TigerFrame.Frag]) ->
                 case TigerFrame.$wsepFrag w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
0cbfeedfea638d73aab5d9b1fc518f03
  sp :: TigerTemp.Temp
  {- Unfolding: (Data.Text.Show.unpackCString# TigerFrame.sp1) -}
a39dfb1ba4ff4422b95fa895fcbfe2d3
  sp1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SP"#) -}
1a7d97ad78d487acdbfb96b4ef0a2213
  specialregs :: [TigerTemp.Temp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTemp.Temp
                   TigerFrame.rv
                   TigerFrame.specialregs1) -}
91a2c62489dfba2cefbabe77a378430b
  specialregs1 :: [TigerTemp.Temp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTemp.Temp
                   TigerFrame.fp
                   TigerFrame.specialregs2) -}
367c04365939373e9b29530bf897beb5
  specialregs2 :: [TigerTemp.Temp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTemp.Temp
                   TigerFrame.sp
                   (GHC.Types.[] @ TigerTemp.Temp)) -}
f4ba8923a788be8f8decf2d6b9cfa94d
  wSz :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
instance GHC.Show.Show [TigerFrame.Access]
  = TigerFrame.$fShowAccess
instance GHC.Show.Show [TigerFrame.Frag] = TigerFrame.$fShowFrag
instance GHC.Show.Show [TigerFrame.Frame] = TigerFrame.$fShowFrame
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

