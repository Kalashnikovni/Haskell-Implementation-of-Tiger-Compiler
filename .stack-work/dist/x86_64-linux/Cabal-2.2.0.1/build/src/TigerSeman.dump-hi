
==================== FINAL INTERFACE ====================
2019-06-15 23:18:38.322851479 UTC

interface HaskTiger-0.1.0.0-E2V2C9MNTGC8IfNMs3zKtJ:TigerSeman 8043
  interface hash: 61c21767622863d54b7484c849bbda03
  ABI hash: d272dba656d8aa833150cf75bb1cee74
  export-list hash: 48cd8166249931b19f5f5d1dca97ad26
  orphan hash: 49820e9e9c82111aa96ace0e87eb550d
  flag hash: 84a707957232ceed2ddebd5ca4ca265a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerSeman.addDer
  TigerSeman.addIzq
  TigerSeman.addpos
  TigerSeman.autoRef
  TigerSeman.buscarM
  TigerSeman.cmpZip
  TigerSeman.depend
  TigerSeman.errorTiposMsg
  TigerSeman.fromTy
  TigerSeman.initConf
  TigerSeman.insertRecordsAsRef
  TigerSeman.insertSortedTys
  TigerSeman.runMonada
  TigerSeman.runSeman
  TigerSeman.splitWith
  TigerSeman.tiposComparables
  TigerSeman.transDecs
  TigerSeman.transExp
  TigerSeman.transTy
  TigerSeman.transVar
  TigerSeman.updateRefs
  TigerSeman.Estado{TigerSeman.Est tEnv vEnv}
  TigerSeman.Manticore{TigerSeman.getTipoFunV TigerSeman.getTipoT TigerSeman.getTipoValV TigerSeman.insertFunV TigerSeman.insertTipoT TigerSeman.insertVRO TigerSeman.insertValV TigerSeman.showTEnv TigerSeman.showVEnv TigerSeman.tiposIguales TigerSeman.ugen}
  TigerSeman.Monada
module dependencies: State TigerAbs TigerErrores TigerSres
                     TigerSymbol TigerTemp TigerTips TigerTopSort TigerUnique
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 cond-0.4.1.1 containers-0.5.11.0
                      deepseq-1.4.3.0 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 mtl-2.2.2
                      syb-0.7 text-1.2.3.0 transformers-0.5.5.0
orphans: syb-0.7:Data.Generics.Instances text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         HaskTiger-0.1.0.0-E2V2C9MNTGC8IfNMs3zKtJ:TigerUnique
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.0:Data.Text
import  -/  TigerAbs 039cda3126c7cc999dbdd3c9a8fcaa0d
  exports: 7916be92b0d3730e8979910ab1e541e2
  ArrayExp 7383ba03887031b09c2b2610ee7b42d8
  ArrayTy f4fbd47e48f2bdead7995718692e03ba
  AssignExp 6a67d04cc8d2f051dd8ef69daca75614
  BreakExp 69638d4e11d257d05f5457a454aca91a
  CallExp 08557e74fa41925815c378121b19cf92
  Dec 88da78297a197b572c2b5511c12295ec
  DivideOp 4ccf8088b1af0300a6c831a623f13033
  EqOp 1f6228ed2b1ffa6fd112682bddd197d5
  Exp 88da78297a197b572c2b5511c12295ec
  FieldVar 2d21fb03afda92d359c055ac6fa57ab4
  ForExp 78bbd9844439d32fb170c98dfd2ba4a8
  FunctionDec b1030fbee71edc48e84cc15dad1ea254
  GeOp 2a761d5f0c6882b86e02d50e46b69f56
  GtOp f50fa7f1caeb84e0579dd2e040d0514e
  IfExp a6a5ceca74fc9219632624bf0bd1e04f
  IntExp 676e6a6860d134a71c15cf261db71517
  LeOp 46081327bd170acffd3866cdd4decfd7
  LetExp 49c4a9268224f23d2061787bc44ec4f9
  LtOp ec015bf1e2693465411a441c7dc6157d
  MinusOp 7a7aeed7509db95e9964f1dedc847c44
  NameTy 347a1b2bd97d0dc6010bf8349303e0d7
  NeqOp 4206623e419b41f55dc8c0703915d3f8
  NilExp 3e2421cee4557b1502a9ad03f0a7bb4c
  OpExp d86c5f78abdc1a387d7739ebbb8143ab
  Oper c9c4b65a014493d89a1c14b9c3c0e41b
  PlusOp 9573c18b9b98da4fa86754e2abaf1824
  RecordExp f5293213a411bdd3310e1dafc6ee6c5c
  RecordTy c0c73586cebaecb02f655cb3e603c0e4
  SeqExp 2ae5d114355569734b170ada174210e0
  SimpleVar 2e2d1e60cba1021b219ac203f1896cd8
  StringExp 8610114bb24fc8f1fa09d6f04f384601
  SubscriptVar cf976665e1103c523bf166531d987c73
  TimesOp f02b5fd36f207a47cd79dc7f804f4378
  Ty bc7a1a3365d4f3c8280578c938b919c6
  TypeDec 569e0bdac2e43863e7d7a25fcd3b8e78
  UnitExp c0bd16d1f508d892e8682a0af37303a5
  Var 88da78297a197b572c2b5511c12295ec
  VarDec 8a8f455ed0081c2bb28afae7a173e9c9
  VarExp edfae8fce3b5f2c0396f3545e0f571d0
  WhileExp 1553436d1baa7fca770ec1bb996a3af1
  splitRecordTy ca7cac547c93e1572b714bd4f67b8732
import  -/  TigerErrores d6b896dc50bb043f0cebb81f57be9e99
  exports: 80457cd72eafb0c7ff967c549f37684c
  Demon 3be4cda8de144480ec2c07e6e8cc4259
  adder 4b31f05dccea2d1d40f7307190dba997
  derror a65d27c25b5e004f00231fb3895a1bf4
  internal 79daad403ebc096204c998e30c982f88
import  -/  TigerSres 736a8c3d44c38ca7dce2cd358d4a7a6f
  exports: 6e8f6a6b66e3dc7ac3e0689632dcf9b1
  EnvEntry 65088e639baa08d6e5eca771c2272dc2
  FunEntry 53d7998c8e31c98bccc392c3c28770ef
  Func 634bd8dfc78fea3a86fa0d348f8dc067
  Runtime ed6ab0bab9ea38b24e15fa901b6a639b
  ValEntry 9f3561ebe49b1e866f29ce36bbaacde4
  Var 4b3baad797b453387993fa2c51faa073
import  -/  TigerSymbol 4628943ae21548f9838cca1c81589f49
  exports: 3aa8690c7d65c85b2775cbd880ffcd19
  Symbol 80a54d65275119c925e5daf83dc9ca3b
  appends 3b13dc7dd8db6888b84e6862c8d9a26c
import  -/  TigerTemp de3b8ff373a73b9b291ae6f59a678eef
  exports: 2391c2332908a7f3d5d168a67d1d057d
import  -/  TigerTips d8b887be1cc120ab6fc657b6944287b8
  exports: de993eb0eee0af29cedaca5e1a8f86bd
  RO ec2ea7bf12b1ed41284375d7bd0dfff6
  RW 7e2c5ce63dae62be78c353140fdfd63f
  RefRecord f41ca62172b6f9b8838888e504a14225
  TArray 06573d696a1ac32796f5b6082e20cd9c
  TBool 1748018f4f130d3f6572ce50bdb6d786
  TInt 0d3541600bb44fc0c7b79cc3f8712d34
  TNil 9aafd18f6ad86598f418bf41873df838
  TRecord f61411d258e1534ea157ec343eba8b99
  TString f75c8ca8d081fd15ec3ae6c82a8b7b81
  TUnit ecd89b0be8f3f9ab4e4c7ee1218e28a0
  Tipo 25d41e0f248a57e8442fd0e3172a3e9f
  equivTipo 417cc21230f09cf4db1db90eb4e81eb2
  errorTipos 87561ae0689bed8803c0443a0dd72285
import  -/  TigerTopSort 1716035cc242251464e11c242c6e2a76
  exports: dc92174bc3935c09ec3dce76d8f20fb6
  kahnSort 10dbccfe0559ef80dd3cb4b1d773849e
import  -/  TigerUnique 2c7b8a003ba6cddf20e41223ec1f0139
  exports: fb658a085da3f6734ecff0198e21e4ae
  StGen 8f2ae381130135b221c61148ea07e4cf
  Unique a8946959a472517f9eeacb91a0a901b7
  UniqueGenerator 3fc04058dd27777fe7f093048cb50c50
  mkUnique 56353a6ff3b28b3dd64e9ac226ace72c
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Ord 8579f16310a4ec69c00617051bb5c3d9
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:Debug.Trace 7d99b5cfd8ae9f4b50938e4fedeaadef
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  cond-0.4.1.1:Control.Conditional 351439980442f7cd2bcadd7d3fced764
import  -/  containers-0.5.11.0:Data.Map f51b9cf04edd738eb6d014be576b3403
import  -/  containers-0.5.11.0:Data.Map.Internal e02d23495520de11b8e9f3c9c93a4d11
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  text-1.2.3.0:Data.Text 4f359e32d6f1c9011b171e00ff8fb023
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Except 1cac4acbba7f36bd732fcc993d3cc20d
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
2038eacf8199066c4cf508d07c01e85c
  $fDemonExceptT :: TigerErrores.Demon TigerSeman.Monada
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerSeman.Monada
                  TigerSeman.$fDemonExceptT6
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either TigerSymbol.Symbol a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                TigerSymbol.Symbol
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <TigerSymbol.Symbol>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fDemonExceptT5
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSeman.Monada a>_R
                   ->_R <TigerSymbol.Symbol>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <TigerSeman.Estado>_N
                                 <State.State GHC.Integer.Type.Integer>_R
                                 <Data.Either.Either
                                    Data.Text.Internal.Text
                                    a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <Data.Text.Internal.Text>_N
                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                        TigerSeman.Estado TigerUnique.StGen>_R
                                                     <a>_N))
                  TigerSeman.$fDemonExceptT3
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <TigerSymbol.Symbol>_N
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    TigerSeman.Estado TigerUnique.StGen>_R
                                 <a>_N))
                  TigerSeman.$fDemonExceptT1
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <TigerSymbol.Symbol>_N
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    TigerSeman.Estado TigerUnique.StGen>_R
                                 <a>_N)) -}
2038eacf8199066c4cf508d07c01e85c
  $fDemonExceptT1 ::
    TigerSymbol.Symbol
    -> Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado
         (State.State GHC.Integer.Type.Integer)
         (Data.Either.Either TigerSymbol.Symbol a)
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ @ a (x11 :: TigerSymbol.Symbol) ->
                 let {
                   x12 :: TigerSymbol.Symbol
                   = TigerSymbol.addStr TigerSeman.$fDemonExceptT_g4 x11
                 } in
                 let {
                   lvl114 :: Data.Either.Either TigerSymbol.Symbol a
                   = Data.Either.Left @ TigerSymbol.Symbol @ a x12
                 } in
                 (\ (eta14 :: TigerSeman.Estado)
                    (eta15 :: GHC.Integer.Type.Integer) ->
                  ((lvl114, eta14), eta15))
                   `cast`
                 ((<TigerSeman.Estado>_R
                   ->_R Sym (State.N:State[0]
                                 <GHC.Integer.Type.Integer>_R
                                 <(Data.Either.Either TigerSymbol.Symbol a,
                                   TigerSeman.Estado)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                      <TigerSeman.Estado>_N
                                                                      <State.State
                                                                         GHC.Integer.Type.Integer>_R
                                                                      <Data.Either.Either
                                                                         TigerSymbol.Symbol
                                                                         a>_N))) -}
5085aa28bd7faf66ce5ef057adb6965d
  $fDemonExceptT2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Not found:"#) -}
2038eacf8199066c4cf508d07c01e85c
  $fDemonExceptT3 ::
    TigerSymbol.Symbol
    -> Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado
         (State.State GHC.Integer.Type.Integer)
         (Data.Either.Either TigerSymbol.Symbol a)
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ @ a (x11 :: TigerSymbol.Symbol) ->
                 let {
                   x12 :: TigerSymbol.Symbol
                   = TigerSymbol.addStr TigerSeman.$fDemonExceptT_g1 x11
                 } in
                 let {
                   lvl114 :: Data.Either.Either TigerSymbol.Symbol a
                   = Data.Either.Left @ TigerSymbol.Symbol @ a x12
                 } in
                 (\ (eta14 :: TigerSeman.Estado)
                    (eta15 :: GHC.Integer.Type.Integer) ->
                  ((lvl114, eta14), eta15))
                   `cast`
                 ((<TigerSeman.Estado>_R
                   ->_R Sym (State.N:State[0]
                                 <GHC.Integer.Type.Integer>_R
                                 <(Data.Either.Either TigerSymbol.Symbol a,
                                   TigerSeman.Estado)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                      <TigerSeman.Estado>_N
                                                                      <State.State
                                                                         GHC.Integer.Type.Integer>_R
                                                                      <Data.Either.Either
                                                                         TigerSymbol.Symbol
                                                                         a>_N))) -}
fb6bd6c946c94ef8277d46aa71b34c92
  $fDemonExceptT4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Internal: "#) -}
2038eacf8199066c4cf508d07c01e85c
  $fDemonExceptT5 ::
    TigerSeman.Monada a
    -> TigerSymbol.Symbol
    -> TigerSeman.Estado
    -> State.State
         GHC.Integer.Type.Integer
         (Data.Either.Either Data.Text.Internal.Text a, TigerSeman.Estado)
  {- Arity: 3,
     Strictness: <L,1*C1(C(U(1*U(1*U,1*U),1*U)))><L,1*U(U,U,U)><L,U> -}
2038eacf8199066c4cf508d07c01e85c
  $fDemonExceptT6 ::
    TigerSymbol.Symbol
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either TigerSymbol.Symbol a, TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (x11 :: TigerSymbol.Symbol)
                   (eta14 :: TigerSeman.Estado)
                   (eta15 :: GHC.Integer.Type.Integer) ->
                 ((Data.Either.Left @ TigerSymbol.Symbol @ a x11, eta14), eta15)) -}
fce9fe9c724f2eba5d141cfcef82d8e6
  $fDemonExceptT_g1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TigerSeman.$fDemonExceptT4) -}
fe14186b004770118a472efe26d44e4d
  $fDemonExceptT_g4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TigerSeman.$fDemonExceptT2) -}
7941b71eddd4d493546339cbac30838e
  $fManticoreExceptT :: TigerSeman.Manticore TigerSeman.Monada
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerSeman.Monada
                  TigerSeman.$fDemonExceptT
                  (TigerSeman.$fManticoreExceptT_$s$fMonadExceptT
                     @ Data.Text.Internal.Text)
                  TigerSeman.$fManticoreExceptT23
                    `cast`
                  ((<TigerSeman.Estado>_R
                    ->_R Sym (State.N:State[0]
                                  <GHC.Integer.Type.Integer>_R
                                  <(Data.Either.Either Data.Text.Internal.Text TigerUnique.Unique,
                                    TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                        <TigerSeman.Estado>_N
                                                                        <State.State
                                                                           GHC.Integer.Type.Integer>_R
                                                                        <Data.Either.Either
                                                                           Data.Text.Internal.Text
                                                                           TigerUnique.Unique>_N) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                              <Data.Text.Internal.Text>_N
                                                                                                              <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                 TigerSeman.Estado
                                                                                                                 TigerUnique.StGen>_R
                                                                                                              <TigerUnique.Unique>_N) ; Sym (TigerUnique.N:UniqueGenerator[0]
                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                    TigerSymbol.Symbol
                                                                                                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                       TigerSeman.Estado
                                                                                                                                                       TigerUnique.StGen)>_N))))
                  TigerSeman.$fManticoreExceptT22
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R <TigerSres.ValEntry>_R
                   ->_R <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fManticoreExceptT21
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R <TigerSres.FunEntry>_R
                   ->_R <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fManticoreExceptT18
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fManticoreExceptT17
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSymbol.Symbol>_R
                   ->_R <TigerTips.Tipo>_R
                   ->_R <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fManticoreExceptT15
                    `cast`
                  (<TigerSymbol.Symbol>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either
                                           Data.Text.Internal.Text TigerSres.FunEntry,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                TigerSres.FunEntry>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Text.Internal.Text>_N
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     TigerSeman.Estado
                                                                                                                     TigerUnique.StGen>_R
                                                                                                                  <TigerSres.FunEntry>_N)))
                  TigerSeman.$fManticoreExceptT10
                    `cast`
                  (<TigerSymbol.Symbol>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either
                                           Data.Text.Internal.Text TigerSres.ValEntry,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                TigerSres.ValEntry>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Text.Internal.Text>_N
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     TigerSeman.Estado
                                                                                                                     TigerUnique.StGen>_R
                                                                                                                  <TigerSres.ValEntry>_N)))
                  TigerSeman.$fManticoreExceptT5
                    `cast`
                  (<TigerSymbol.Symbol>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text TigerTips.Tipo,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                TigerTips.Tipo>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                              <Data.Text.Internal.Text>_N
                                                                                                              <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                 TigerSeman.Estado
                                                                                                                 TigerUnique.StGen>_R
                                                                                                              <TigerTips.Tipo>_N)))
                  TigerSeman.$fManticoreExceptT4
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fManticoreExceptT3
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either Data.Text.Internal.Text a,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                                                                    TigerSeman.Estado
                                                                                                    TigerUnique.StGen>_R
                                                                                                 <a>_N)))
                  TigerSeman.$fManticoreExceptT1
                    `cast`
                  (forall (a :: <*>_N).
                   <TigerSeman.Monada a>_R
                   ->_R (<TigerSeman.Estado>_R
                         ->_R Sym (State.N:State[0]
                                       <GHC.Integer.Type.Integer>_R
                                       <(Data.Either.Either
                                           Data.Text.Internal.Text TigerUnique.Unique,
                                         TigerSeman.Estado)>_R)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                             <TigerSeman.Estado>_N
                                                                             <State.State
                                                                                GHC.Integer.Type.Integer>_R
                                                                             <Data.Either.Either
                                                                                Data.Text.Internal.Text
                                                                                TigerUnique.Unique>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Text.Internal.Text>_N
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     TigerSeman.Estado
                                                                                                                     TigerUnique.StGen>_R
                                                                                                                  <TigerUnique.Unique>_N)))
                  TigerSeman.$fManticoreExceptT_$ctiposIguales -}
877fa8a58e3a913960d68b41fa08e5ff
  $fManticoreExceptT1 ::
    TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerUnique.Unique,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (w :: TigerSeman.Monada a) ->
                 TigerSeman.$fManticoreExceptT2) -}
91e6ac830d5e7df6822ab2df2df1c3bb
  $fManticoreExceptT10 ::
    TigerSymbol.Symbol
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerSres.ValEntry,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <S(SSS),1*U(U,U,U)><S(SL),1*U(U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: TigerSymbol.Symbol)
                   (w1 :: TigerSeman.Estado)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { TigerSeman.Est ww5 ww6 ->
                 case TigerSeman.$wpoly_go13
                        @ TigerSres.EnvEntry
                        ww1
                        ww2
                        ww3
                        ww5 of wild {
                   GHC.Base.Nothing
                   -> ((Data.Either.Left
                          @ TigerSymbol.Symbol
                          @ TigerSres.ValEntry
                          (TigerSymbol.addStr
                             TigerSeman.$fDemonExceptT_g1
                             (TigerSymbol.appends
                                (GHC.Types.:
                                   @ TigerSymbol.Symbol
                                   TigerSeman.$fManticoreExceptT8
                                   (GHC.Types.:
                                      @ TigerSymbol.Symbol
                                      (Data.Text.Internal.Text ww1 ww2 ww3)
                                      TigerSeman.$fManticoreExceptT14)))),
                        TigerSeman.Est ww5 ww6),
                       w2)
                   GHC.Base.Just ds
                   -> case ds of wild1 {
                        TigerSres.Var v
                        -> ((Data.Either.Right
                               @ Data.Text.Internal.Text
                               @ TigerSres.ValEntry
                               v,
                             TigerSeman.Est ww5 ww6),
                            w2)
                        TigerSres.Func ds1
                        -> ((TigerSeman.$fManticoreExceptT11, TigerSeman.Est ww5 ww6),
                            w2) } } } }) -}
918a735d8249b4bb18f2670ed18d548b
  $fManticoreExceptT11 ::
    Data.Either.Either TigerSymbol.Symbol TigerSres.ValEntry
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ TigerSymbol.Symbol
                   @ TigerSres.ValEntry
                   TigerSeman.$fManticoreExceptT12) -}
ab1027fed8f86302d4463e72a75dd484
  $fManticoreExceptT12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.$fManticoreExceptT13) -}
4a991b35ae77d4d0a93b7909b37f6706
  $fManticoreExceptT13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Corregir compilador"#) -}
4873b1904ea1a51d045a2870f5d5695c
  $fManticoreExceptT14 :: [TigerSymbol.Symbol]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerSymbol.Symbol
                   TigerSeman.$fManticoreExceptT6
                   (GHC.Types.[] @ TigerSymbol.Symbol)) -}
abbc90b928cc38d167337efa715e76c4
  $fManticoreExceptT15 ::
    TigerSymbol.Symbol
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerSres.FunEntry,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <S(SSS),1*U(U,U,U)><S(SL),1*U(U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: TigerSymbol.Symbol)
                   (w1 :: TigerSeman.Estado)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { TigerSeman.Est ww5 ww6 ->
                 case TigerSeman.$wpoly_go13
                        @ TigerSres.EnvEntry
                        ww1
                        ww2
                        ww3
                        ww5 of wild {
                   GHC.Base.Nothing
                   -> ((Data.Either.Left
                          @ TigerSymbol.Symbol
                          @ TigerSres.FunEntry
                          (TigerSymbol.addStr
                             TigerSeman.$fDemonExceptT_g1
                             (TigerSymbol.appends
                                (GHC.Types.:
                                   @ TigerSymbol.Symbol
                                   TigerSeman.$fManticoreExceptT8
                                   (GHC.Types.:
                                      @ TigerSymbol.Symbol
                                      (Data.Text.Internal.Text ww1 ww2 ww3)
                                      TigerSeman.$fManticoreExceptT14)))),
                        TigerSeman.Est ww5 ww6),
                       w2)
                   GHC.Base.Just ds
                   -> case ds of wild1 {
                        TigerSres.Var ds1
                        -> ((TigerSeman.$fManticoreExceptT16, TigerSeman.Est ww5 ww6), w2)
                        TigerSres.Func f
                        -> ((Data.Either.Right
                               @ Data.Text.Internal.Text
                               @ TigerSres.FunEntry
                               f,
                             TigerSeman.Est ww5 ww6),
                            w2) } } } }) -}
4515aed40a6e61ed429a2ec7a69069f3
  $fManticoreExceptT16 ::
    Data.Either.Either TigerSymbol.Symbol TigerSres.FunEntry
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ TigerSymbol.Symbol
                   @ TigerSres.FunEntry
                   TigerSeman.$fManticoreExceptT12) -}
d4815415bb1f387eaa8953f611cc59ab
  $fManticoreExceptT17 ::
    TigerSymbol.Symbol
    -> TigerTips.Tipo
    -> TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text a,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 5,
     Strictness: <L,U(U,U,U)><L,U><C(C(S(S(SL)L))),1*C1(C1(U(U(U,U),U)))><L,U(U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (w :: TigerSymbol.Symbol)
                   (w1 :: TigerTips.Tipo)
                   (w2 :: TigerSeman.Monada a)
                   (w3 :: TigerSeman.Estado)
                   (w4 :: GHC.Integer.Type.Integer) ->
                 case (w2
                         `cast`
                       (Control.Monad.Trans.Except.N:ExceptT[0]
                            <Data.Text.Internal.Text>_N
                            <Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen>_R
                            <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <TigerSeman.Estado>_N
                                        <State.State GHC.Integer.Type.Integer>_R
                                        <Data.Either.Either Data.Text.Internal.Text a>_N)
                         (case w3 of wild { TigerSeman.Est ds ds1 ->
                          TigerSeman.Est
                            ds
                            (TigerSeman.$fManticoreExceptT_$sgo13
                               @ TigerTips.Tipo
                               w
                               w
                               w1
                               ds1) }))
                        `cast`
                      (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either Data.Text.Internal.Text a,
                             TigerSeman.Estado)>_R)
                        w4 of wild { (,) x' s' ->
                 case x' of wild1 { (,) a1 s'1 ->
                 case a1 of wild2 {
                   Data.Either.Left e1
                   -> ((Data.Either.Left @ Data.Text.Internal.Text @ a e1, s'1), s')
                   Data.Either.Right x11
                   -> ((Data.Either.Right @ Data.Text.Internal.Text @ a x11, w3),
                       s') } } }) -}
c8467f53cf0b475f751b1d64dfee3dde
  $fManticoreExceptT18 ::
    TigerSymbol.Symbol
    -> TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text a,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 4,
     Strictness: <L,1*U(U,U,U)><C(C(S(S(SL)L))),1*C1(C1(U(1*U(U,U),U)))><L,U(U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: TigerSymbol.Symbol)
                   (w1 :: TigerSeman.Monada a)
                   (w2 :: TigerSeman.Estado)
                   (w3 :: GHC.Integer.Type.Integer) ->
                 case (w1
                         `cast`
                       (Control.Monad.Trans.Except.N:ExceptT[0]
                            <Data.Text.Internal.Text>_N
                            <Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen>_R
                            <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <TigerSeman.Estado>_N
                                        <State.State GHC.Integer.Type.Integer>_R
                                        <Data.Either.Either Data.Text.Internal.Text a>_N)
                         (case w2 of wild { TigerSeman.Est ds ds1 ->
                          TigerSeman.Est
                            (case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                             TigerSeman.$w$sgo13
                               @ TigerSres.EnvEntry
                               ww
                               ww1
                               ww2
                               ww3
                               TigerSeman.$fManticoreExceptT19
                               ds })
                            ds1 }))
                        `cast`
                      (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either Data.Text.Internal.Text a,
                             TigerSeman.Estado)>_R)
                        w3 of wild { (,) x' s' ->
                 case x' of wild1 { (,) a1 s'1 ->
                 case a1 of wild2 {
                   Data.Either.Left e1 -> (wild1, s')
                   Data.Either.Right x11 -> ((wild2, w2), s') } } }) -}
442ff50aa9f3c318de38bb808ab8d6bb
  $fManticoreExceptT19 :: TigerSres.EnvEntry
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (TigerSres.Var TigerSeman.$fManticoreExceptT20) -}
b7a89e04a9fc313d1ae865fd9f816ee6
  $fManticoreExceptT2 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerUnique.Unique,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <L,U><L,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: TigerSeman.Estado) (eta14 :: GHC.Integer.Type.Integer) ->
                 let {
                   s :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.plusInteger
                       eta14
                       TigerUnique.$fUniqueGeneratorState2
                 } in
                 ((Data.Either.Right
                     @ Data.Text.Internal.Text
                     @ TigerUnique.Unique
                     s,
                   s1),
                  s)) -}
880542ff9e8e85c20f331e1f74fc155b
  $fManticoreExceptT20 :: TigerTips.Tipo
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (TigerTips.TInt TigerTips.RO) -}
8c3f313ec69959bda7cf07dcc72f7187
  $fManticoreExceptT21 ::
    TigerSymbol.Symbol
    -> TigerSres.FunEntry
    -> TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text a,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 5,
     Strictness: <L,1*U(U,U,U)><L,U><C(C(S(S(SL)L))),1*C1(C1(U(1*U(U,U),U)))><L,U(U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (w :: TigerSymbol.Symbol)
                   (w1 :: TigerSres.FunEntry)
                   (w2 :: TigerSeman.Monada a)
                   (w3 :: TigerSeman.Estado)
                   (w4 :: GHC.Integer.Type.Integer) ->
                 case (w2
                         `cast`
                       (Control.Monad.Trans.Except.N:ExceptT[0]
                            <Data.Text.Internal.Text>_N
                            <Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen>_R
                            <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <TigerSeman.Estado>_N
                                        <State.State GHC.Integer.Type.Integer>_R
                                        <Data.Either.Either Data.Text.Internal.Text a>_N)
                         (case w3 of wild { TigerSeman.Est ds ds1 ->
                          TigerSeman.Est
                            (case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                             TigerSeman.$w$sgo13
                               @ TigerSres.EnvEntry
                               ww
                               ww1
                               ww2
                               ww3
                               (TigerSres.Func w1)
                               ds })
                            ds1 }))
                        `cast`
                      (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either Data.Text.Internal.Text a,
                             TigerSeman.Estado)>_R)
                        w4 of wild { (,) x' s' ->
                 case x' of wild1 { (,) a1 s'1 ->
                 case a1 of wild2 {
                   Data.Either.Left e1 -> (wild1, s')
                   Data.Either.Right x11 -> ((wild2, w3), s') } } }) -}
6b64c285cb5534c407bcd87a1bff3843
  $fManticoreExceptT22 ::
    TigerSymbol.Symbol
    -> TigerSres.ValEntry
    -> TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text a,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 5,
     Strictness: <L,1*U(U,U,U)><L,U><C(C(S(S(SL)L))),1*C1(C1(U(1*U(U,U),U)))><L,U(U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (w :: TigerSymbol.Symbol)
                   (w1 :: TigerSres.ValEntry)
                   (w2 :: TigerSeman.Monada a)
                   (w3 :: TigerSeman.Estado)
                   (w4 :: GHC.Integer.Type.Integer) ->
                 case (w2
                         `cast`
                       (Control.Monad.Trans.Except.N:ExceptT[0]
                            <Data.Text.Internal.Text>_N
                            <Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen>_R
                            <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <TigerSeman.Estado>_N
                                        <State.State GHC.Integer.Type.Integer>_R
                                        <Data.Either.Either Data.Text.Internal.Text a>_N)
                         (case w3 of wild { TigerSeman.Est ds ds1 ->
                          TigerSeman.Est
                            (case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                             TigerSeman.$w$sgo13
                               @ TigerSres.EnvEntry
                               ww
                               ww1
                               ww2
                               ww3
                               (TigerSres.Var w1)
                               ds })
                            ds1 }))
                        `cast`
                      (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either Data.Text.Internal.Text a,
                             TigerSeman.Estado)>_R)
                        w4 of wild { (,) x' s' ->
                 case x' of wild1 { (,) a1 s'1 ->
                 case a1 of wild2 {
                   Data.Either.Left e1 -> (wild1, s')
                   Data.Either.Right x11 -> ((wild2, w3), s') } } }) -}
b4ce5a9b432e47fc4112242fb918ee39
  $fManticoreExceptT23 ::
    TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerUnique.Unique,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <L,U><L,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: TigerSeman.Estado) (eta14 :: GHC.Integer.Type.Integer) ->
                 let {
                   s :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.plusInteger
                       eta14
                       TigerUnique.$fUniqueGeneratorState2
                 } in
                 ((Data.Either.Right
                     @ Data.Text.Internal.Text
                     @ TigerUnique.Unique
                     s,
                   s1),
                  s)) -}
783852cf125d123f8351527d8b8444f2
  $fManticoreExceptT3 ::
    TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text a,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <L,U><L,U(U,U)><L,U>,
     Unfolding: (\ @ a
                   (w :: TigerSeman.Monada a)
                   (s1 :: TigerSeman.Estado)
                   (eta14 :: GHC.Integer.Type.Integer) ->
                 ((Debug.Trace.trace
                     @ (TigerSeman.Monada a)
                     (Data.Map.Internal.$w$cshowsPrec
                        @ Data.Text.Internal.Text
                        @ TigerTips.Tipo
                        Data.Text.Show.$fShowText
                        TigerTips.$fShowTipo
                        0#
                        (case s1 of wild { TigerSeman.Est ds ds1 -> ds1 })
                        (GHC.Types.[] @ GHC.Types.Char))
                     w)
                    `cast`
                  (Control.Monad.Trans.Except.N:ExceptT[0]
                       <Data.Text.Internal.Text>_N
                       <Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen>_R
                       <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                   <TigerSeman.Estado>_N
                                   <State.State GHC.Integer.Type.Integer>_R
                                   <Data.Either.Either Data.Text.Internal.Text a>_N)
                    s1)
                   `cast`
                 (State.N:State[0]
                      <GHC.Integer.Type.Integer>_R
                      <(Data.Either.Either Data.Text.Internal.Text a,
                        TigerSeman.Estado)>_R)
                   eta14) -}
d5cdd6373bcfd52d6bc891b150e62c5c
  $fManticoreExceptT4 ::
    TigerSeman.Monada a
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text a,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <L,U><L,U(U,U)><L,U>,
     Unfolding: (\ @ a
                   (w :: TigerSeman.Monada a)
                   (s1 :: TigerSeman.Estado)
                   (eta14 :: GHC.Integer.Type.Integer) ->
                 ((Debug.Trace.trace
                     @ (TigerSeman.Monada a)
                     (Data.Map.Internal.$w$cshowsPrec
                        @ Data.Text.Internal.Text
                        @ TigerSres.EnvEntry
                        Data.Text.Show.$fShowText
                        TigerSres.$fShowEnvEntry
                        0#
                        (case s1 of wild { TigerSeman.Est ds ds1 -> ds })
                        (GHC.Types.[] @ GHC.Types.Char))
                     w)
                    `cast`
                  (Control.Monad.Trans.Except.N:ExceptT[0]
                       <Data.Text.Internal.Text>_N
                       <Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen>_R
                       <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                   <TigerSeman.Estado>_N
                                   <State.State GHC.Integer.Type.Integer>_R
                                   <Data.Either.Either Data.Text.Internal.Text a>_N)
                    s1)
                   `cast`
                 (State.N:State[0]
                      <GHC.Integer.Type.Integer>_R
                      <(Data.Either.Either Data.Text.Internal.Text a,
                        TigerSeman.Estado)>_R)
                   eta14) -}
64a64e8a534ca2054bbe8104bf380584
  $fManticoreExceptT5 ::
    TigerSymbol.Symbol
    -> TigerSeman.Estado
    -> GHC.Integer.Type.Integer
    -> ((Data.Either.Either Data.Text.Internal.Text TigerTips.Tipo,
         TigerSeman.Estado),
        GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <S(SSS),1*U(U,U,U)><S(LS),1*U(U,U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: TigerSymbol.Symbol)
                   (w1 :: TigerSeman.Estado)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { TigerSeman.Est ww5 ww6 ->
                 case TigerSeman.$wpoly_go13
                        @ TigerTips.Tipo
                        ww1
                        ww2
                        ww3
                        ww6 of wild {
                   GHC.Base.Nothing
                   -> ((Data.Either.Left
                          @ TigerSymbol.Symbol
                          @ TigerTips.Tipo
                          (TigerSymbol.addStr
                             TigerSeman.$fDemonExceptT_g1
                             (TigerSymbol.appends
                                (GHC.Types.:
                                   @ TigerSymbol.Symbol
                                   TigerSeman.$fManticoreExceptT8
                                   (GHC.Types.:
                                      @ TigerSymbol.Symbol
                                      (Data.Text.Internal.Text ww1 ww2 ww3)
                                      (GHC.Types.:
                                         @ TigerSymbol.Symbol
                                         TigerSeman.$fManticoreExceptT6
                                         (GHC.Types.[] @ TigerSymbol.Symbol)))))),
                        TigerSeman.Est ww5 ww6),
                       w2)
                   GHC.Base.Just t
                   -> ((Data.Either.Right
                          @ Data.Text.Internal.Text
                          @ TigerTips.Tipo
                          t,
                        TigerSeman.Est ww5 ww6),
                       w2) } } }) -}
926692233914418c6f3bb9b7fb11ec68
  $fManticoreExceptT6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.$fManticoreExceptT7) -}
a424e20679390d620e1061d0dec271e0
  $fManticoreExceptT7 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: (" deber\\195\\173a estar en el entorno"#) -}
aaa90dc9bee120dc1359810b5c613098
  $fManticoreExceptT8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.$fManticoreExceptT9) -}
e2be4f6b65253e2c687e24d19454d5c8
  $fManticoreExceptT9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Error de Haskell, "#) -}
effe39891412057e301bbccd870b9023
  $fManticoreExceptT_$ctiposIguales ::
    TigerTips.Tipo
    -> TigerTips.Tipo -> TigerSeman.Monada GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U> -}
05241dbd760e7fc941c53c1ddb7efea9
  $fManticoreExceptT_$s$fApplicativeExceptT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e
                       (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen))
                  (TigerSeman.$fManticoreExceptT_$s$fFunctorExceptT @ e)
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeExceptT_$cpure @ e)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen)
                     @ e
                     (TigerSeman.$fManticoreExceptT_$s$fFunctorStateT
                        @ TigerSeman.Estado)
                     (TigerSeman.$fManticoreExceptT_$s$fMonadStateT
                        @ TigerSeman.Estado))
                  (\ @ a
                     @ b
                     @ c
                     (f1 :: a -> b -> c)
                     (x11 :: Control.Monad.Trans.Except.ExceptT
                               e
                               (Control.Monad.Trans.State.Lazy.StateT
                                  TigerSeman.Estado TigerUnique.StGen)
                               a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen)
                     @ e
                     (TigerSeman.$fManticoreExceptT_$s$fFunctorStateT
                        @ TigerSeman.Estado)
                     (TigerSeman.$fManticoreExceptT_$s$fMonadStateT @ TigerSeman.Estado)
                     @ b
                     @ c
                     (\ (s1 :: TigerSeman.Estado) ->
                      let {
                        m :: State.State
                               GHC.Integer.Type.Integer
                               (Data.Either.Either e a, TigerSeman.Estado)
                        = x11
                            `cast`
                          (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  TigerSeman.Estado TigerUnique.StGen>_R
                               <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <TigerSeman.Estado>_N
                                           <State.State GHC.Integer.Type.Integer>_R
                                           <Data.Either.Either e a>_N)
                            s1
                      } in
                      (\ (s' :: GHC.Integer.Type.Integer) ->
                       let {
                         ds1 :: ((Data.Either.Either e a, TigerSeman.Estado),
                                 GHC.Integer.Type.Integer)
                         = m `cast`
                           (State.N:State[0]
                                <GHC.Integer.Type.Integer>_R
                                <(Data.Either.Either e a, TigerSeman.Estado)>_R)
                             s'
                       } in
                       (let {
                          ds :: (Data.Either.Either e a, TigerSeman.Estado)
                          = case ds1 of wild { (,) x12 y -> x12 }
                        } in
                        (case ds of wild { (,) a1 s'1 ->
                         case a1 of wild1 {
                           Data.Either.Left x12 -> Data.Either.Left @ e @ (b -> c) x12
                           Data.Either.Right y -> Data.Either.Right @ e @ (b -> c) (f1 y) } },
                         case ds of wild { (,) a1 s'1 -> s'1 }),
                        case ds1 of wild { (,) x12 y -> y }))
                        `cast`
                      (Sym (State.N:State[0]
                                <GHC.Integer.Type.Integer>_R
                                <(Data.Either.Either e (b -> c), TigerSeman.Estado)>_R)))
                       `cast`
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.Estado>_N
                               <State.State GHC.Integer.Type.Integer>_R
                               <Data.Either.Either
                                  e (b -> c)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N
                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                               TigerSeman.Estado
                                                               TigerUnique.StGen>_R
                                                            <b -> c>_N)))
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeExceptT_$c*> @ e)
                  (\ @ a
                     @ b
                     (x11 :: Control.Monad.Trans.Except.ExceptT
                               e
                               (Control.Monad.Trans.State.Lazy.StateT
                                  TigerSeman.Estado TigerUnique.StGen)
                               a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen)
                     @ e
                     (TigerSeman.$fManticoreExceptT_$s$fFunctorStateT
                        @ TigerSeman.Estado)
                     (TigerSeman.$fManticoreExceptT_$s$fMonadStateT @ TigerSeman.Estado)
                     @ b
                     @ a
                     (\ (s1 :: TigerSeman.Estado) ->
                      let {
                        m :: State.State
                               GHC.Integer.Type.Integer
                               (Data.Either.Either e a, TigerSeman.Estado)
                        = x11
                            `cast`
                          (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  TigerSeman.Estado TigerUnique.StGen>_R
                               <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <TigerSeman.Estado>_N
                                           <State.State GHC.Integer.Type.Integer>_R
                                           <Data.Either.Either e a>_N)
                            s1
                      } in
                      (\ (s' :: GHC.Integer.Type.Integer) ->
                       let {
                         ds1 :: ((Data.Either.Either e a, TigerSeman.Estado),
                                 GHC.Integer.Type.Integer)
                         = m `cast`
                           (State.N:State[0]
                                <GHC.Integer.Type.Integer>_R
                                <(Data.Either.Either e a, TigerSeman.Estado)>_R)
                             s'
                       } in
                       (let {
                          ds :: (Data.Either.Either e a, TigerSeman.Estado)
                          = case ds1 of wild { (,) x12 y -> x12 }
                        } in
                        (case ds of wild { (,) a1 s'1 ->
                         case a1 of wild1 {
                           Data.Either.Left x12 -> Data.Either.Left @ e @ (b -> a) x12
                           Data.Either.Right y
                           -> Data.Either.Right @ e @ (b -> a) (\ (ds2 :: b) -> y) } },
                         case ds of wild { (,) a1 s'1 -> s'1 }),
                        case ds1 of wild { (,) x12 y -> y }))
                        `cast`
                      (Sym (State.N:State[0]
                                <GHC.Integer.Type.Integer>_R
                                <(Data.Either.Either e (b -> a), TigerSeman.Estado)>_R)))
                       `cast`
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.Estado>_N
                               <State.State GHC.Integer.Type.Integer>_R
                               <Data.Either.Either
                                  e (b -> a)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N
                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                               TigerSeman.Estado
                                                               TigerUnique.StGen>_R
                                                            <b -> a>_N))) -}
d51c9a32600d75f03e7a628e301a083d
  $fManticoreExceptT_$s$fApplicativeExceptT_$c*> ::
    Control.Monad.Trans.Except.ExceptT
      e
      (Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado TigerUnique.StGen)
      a
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         b
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(1*U,U),U)))><L,C(C1(U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Except.ExceptT
                            e
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen)
                            a)
                   (k :: Control.Monad.Trans.Except.ExceptT
                           e
                           (Control.Monad.Trans.State.Lazy.StateT
                              TigerSeman.Estado TigerUnique.StGen)
                           b)
                   (s1 :: TigerSeman.Estado) ->
                 let {
                   x11 :: State.State
                            GHC.Integer.Type.Integer
                            (Data.Either.Either e a, TigerSeman.Estado)
                   = m1
                       `cast`
                     (Control.Monad.Trans.Except.N:ExceptT[0]
                          <e>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             TigerSeman.Estado TigerUnique.StGen>_R
                          <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <TigerSeman.Estado>_N
                                      <State.State GHC.Integer.Type.Integer>_R
                                      <Data.Either.Either e a>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  case x11
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e a, TigerSeman.Estado)>_R)
                         s2 of wild { (,) x' s' ->
                  case x' of wild1 { (,) a1 s'1 ->
                  case a1 of wild2 {
                    Data.Either.Left e1 -> ((Data.Either.Left @ e @ b e1, s'1), s')
                    Data.Either.Right x12
                    -> (k `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <e>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                TigerSeman.Estado TigerUnique.StGen>_R
                             <b>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <TigerSeman.Estado>_N
                                         <State.State GHC.Integer.Type.Integer>_R
                                         <Data.Either.Either e b>_N)
                          s'1)
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e b, TigerSeman.Estado)>_R)
                         s' } } })
                   `cast`
                 (Sym (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either e b, TigerSeman.Estado)>_R)))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e
                    (Control.Monad.Trans.State.Lazy.StateT
                       TigerSeman.Estado TigerUnique.StGen)
                    a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT
                         e
                         (Control.Monad.Trans.State.Lazy.StateT
                            TigerSeman.Estado TigerUnique.StGen)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.Estado>_N
                               <State.State GHC.Integer.Type.Integer>_R
                               <Data.Either.Either
                                  e b>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N
                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                        TigerSeman.Estado TigerUnique.StGen>_R
                                                     <b>_N)) -}
99153b8817f6d8cc7b96cdf0243898ad
  $fManticoreExceptT_$s$fApplicativeExceptT_$cpure ::
    a
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e @ a (a1 :: a) ->
                 let {
                   eta14 :: Data.Either.Either e a = Data.Either.Right @ e @ a a1
                 } in
                 (\ (eta15 :: TigerSeman.Estado) ->
                  let {
                    a2 :: (Data.Either.Either e a, TigerSeman.Estado) = (eta14, eta15)
                  } in
                  (\ (s1 :: GHC.Integer.Type.Integer) -> (a2, s1))
                    `cast`
                  (Sym (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e a, TigerSeman.Estado)>_R)))
                   `cast`
                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <TigerSeman.Estado>_N
                           <State.State GHC.Integer.Type.Integer>_R
                           <Data.Either.Either e a>_N)))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  TigerSeman.Estado TigerUnique.StGen>_R
                               <a>_N)) -}
9b69bef7fb47826201f0aeabe2dc4c51
  $fManticoreExceptT_$s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s (State.State GHC.Integer.Type.Integer))
                  (TigerSeman.$fManticoreExceptT_$s$fFunctorStateT @ s)
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT_$cpure @ s)
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT_$c<*> @ s)
                  (Control.Monad.Trans.State.Lazy.$fAlternativeStateT2
                     @ (State.State GHC.Integer.Type.Integer)
                     @ s
                     (State.$fFunctorState @ GHC.Integer.Type.Integer)
                     (State.$fMonadState @ GHC.Integer.Type.Integer))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s (State.State GHC.Integer.Type.Integer) a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s (State.State GHC.Integer.Type.Integer) b>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <State.State GHC.Integer.Type.Integer>_R <c>_N))
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT_$c*> @ s)
                  (\ @ a
                     @ b
                     (x11 :: Control.Monad.Trans.State.Lazy.StateT
                               s (State.State GHC.Integer.Type.Integer) a)
                     (eta14 :: Control.Monad.Trans.State.Lazy.StateT
                                 s (State.State GHC.Integer.Type.Integer) b)
                     (eta15 :: s) ->
                   let {
                     m :: State.State GHC.Integer.Type.Integer (a, s)
                     = x11
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)
                         eta15
                   } in
                   (\ (s1 :: GHC.Integer.Type.Integer) ->
                    let {
                      ds1 :: ((a, s), GHC.Integer.Type.Integer)
                      = m `cast`
                        (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)
                          s1
                    } in
                    let {
                      ds :: (a, s) = case ds1 of wild { (,) x12 y -> x12 }
                    } in
                    let {
                      x12 :: State.State GHC.Integer.Type.Integer (b, s)
                      = eta14
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)
                          (case ds of wild { (,) a1 s' -> s' })
                    } in
                    let {
                      ds2 :: ((b, s), GHC.Integer.Type.Integer)
                      = x12
                          `cast`
                        (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)
                          (case ds1 of wild { (,) x13 y -> y })
                    } in
                    ((case ds of wild { (,) a1 s' -> a1 },
                      case ds2 of wild { (,) x' s' ->
                      case x' of wild1 { (,) x13 s'' -> s'' } }),
                     case ds2 of wild { (,) x' s' -> s' }))
                     `cast`
                   (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.State.Lazy.StateT
                      s (State.State GHC.Integer.Type.Integer) a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s (State.State GHC.Integer.Type.Integer) b>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)) -}
5452e9424efb71a6dcbdac898f9d750e
  $fManticoreExceptT_$s$fApplicativeStateT_$c*> ::
    Control.Monad.Trans.State.Lazy.StateT
      s (State.State GHC.Integer.Type.Integer) a
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) b
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(A,1*U),1*U)))><L,C(C1(U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s (State.State GHC.Integer.Type.Integer) a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT
                           s (State.State GHC.Integer.Type.Integer) b)
                   (s1 :: s) ->
                 let {
                   x11 :: State.State GHC.Integer.Type.Integer (a, s)
                   = m1
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  let {
                    ds :: ((a, s), GHC.Integer.Type.Integer)
                    = x11
                        `cast`
                      (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)
                        s2
                  } in
                  (k `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)
                     (case ds of wild { (,) x' s' ->
                      case x' of wild1 { (,) a1 s'1 -> s'1 } }))
                    `cast`
                  (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)
                    (case ds of wild { (,) x' s' -> s' }))
                   `cast`
                 (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s (State.State GHC.Integer.Type.Integer) a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s (State.State GHC.Integer.Type.Integer) b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)) -}
d5401d1f74ca4a6c7f0fb85f4d788a8d
  $fManticoreExceptT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Lazy.StateT
      s (State.State GHC.Integer.Type.Integer) (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) a
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(1*C1(U),1*U),1*U)))><L,C(C1(U(1*U(1*U,1*U),1*U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Lazy.StateT
                            s (State.State GHC.Integer.Type.Integer) (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Lazy.StateT
                             s (State.State GHC.Integer.Type.Integer) a)
                   (s1 :: s) ->
                 let {
                   x11 :: State.State GHC.Integer.Type.Integer (a -> b, s)
                   = ds
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <State.State GHC.Integer.Type.Integer>_R <a -> b>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  let {
                    ds2 :: ((a -> b, s), GHC.Integer.Type.Integer)
                    = x11
                        `cast`
                      (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a -> b, s)>_R)
                        s2
                  } in
                  let {
                    ds3 :: (a -> b, s) = case ds2 of wild { (,) x' s' -> x' }
                  } in
                  let {
                    x12 :: State.State GHC.Integer.Type.Integer (a, s)
                    = ds1
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)
                        (case ds3 of wild { (,) f s' -> s' })
                  } in
                  let {
                    ds4 :: ((a, s), GHC.Integer.Type.Integer)
                    = x12
                        `cast`
                      (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)
                        (case ds2 of wild { (,) x' s' -> s' })
                  } in
                  let {
                    ds5 :: (a, s) = case ds4 of wild { (,) x' s' -> x' }
                  } in
                  ((case ds3 of wild { (,) f s' ->
                    f (case ds5 of wild1 { (,) x13 s'' -> x13 }) },
                    case ds5 of wild { (,) x13 s'' -> s'' }),
                   case ds4 of wild { (,) x' s' -> s' }))
                   `cast`
                 (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s (State.State GHC.Integer.Type.Integer) (a -> b)>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s (State.State GHC.Integer.Type.Integer) a>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)) -}
6bde9bdb8bdedeca0e722f99eb942882
  $fManticoreExceptT_$s$fApplicativeStateT_$cpure ::
    a
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (a1 :: a) (s1 :: s) ->
                 let {
                   a2 :: (a, s) = (a1, s1)
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) -> (a2, s2))
                   `cast`
                 (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)) -}
a7ce41ce5a58250952c8dfde083a5cb4
  $fManticoreExceptT_$s$fFunctorExceptT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e
                       (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen))
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$cfmap
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen)
                     @ e
                     (TigerSeman.$fManticoreExceptT_$s$fFunctorStateT
                        @ TigerSeman.Estado))
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$c<$
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen)
                     @ e
                     (TigerSeman.$fManticoreExceptT_$s$fFunctorStateT
                        @ TigerSeman.Estado)) -}
fa5de385bc96ba89e990e64362ff8f6e
  $fManticoreExceptT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s (State.State GHC.Integer.Type.Integer))
                  (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap
                     @ (State.State GHC.Integer.Type.Integer)
                     @ s
                     (State.$fFunctorState @ GHC.Integer.Type.Integer))
                  (\ @ a
                     @ b
                     (x11 :: a)
                     (eta14 :: Control.Monad.Trans.State.Lazy.StateT
                                 s (State.State GHC.Integer.Type.Integer) b)
                     (eta15 :: s) ->
                   let {
                     m :: State.State GHC.Integer.Type.Integer (b, s)
                     = eta14
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)
                         eta15
                   } in
                   (\ (s' :: GHC.Integer.Type.Integer) ->
                    let {
                      ds1 :: ((b, s), GHC.Integer.Type.Integer)
                      = m `cast`
                        (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)
                          s'
                    } in
                    ((x11,
                      case ds1 of wild { (,) x12 y ->
                      case x12 of wild1 { (,) a1 s'1 -> s'1 } }),
                     case ds1 of wild { (,) x12 y -> y }))
                     `cast`
                   (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s (State.State GHC.Integer.Type.Integer) b>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)) -}
be163f1a627db6ced0f588fba13d7f74
  $fManticoreExceptT_$s$fMonadExceptT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e
                       (Control.Monad.Trans.State.Lazy.StateT
                          TigerSeman.Estado TigerUnique.StGen))
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeExceptT @ e)
                  (TigerSeman.$fManticoreExceptT_$s$fMonadExceptT_$c>>= @ e)
                  (TigerSeman.$fManticoreExceptT_$s$fMonadExceptT_$c>> @ e)
                  (\ @ a (eta14 :: a) ->
                   let {
                     eta15 :: Data.Either.Either e a = Data.Either.Right @ e @ a eta14
                   } in
                   (\ (eta16 :: TigerSeman.Estado) ->
                    let {
                      a1 :: (Data.Either.Either e a, TigerSeman.Estado) = (eta15, eta16)
                    } in
                    (\ (s1 :: GHC.Integer.Type.Integer) -> (a1, s1))
                      `cast`
                    (Sym (State.N:State[0]
                              <GHC.Integer.Type.Integer>_R
                              <(Data.Either.Either e a, TigerSeman.Estado)>_R)))
                     `cast`
                   (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <TigerSeman.Estado>_N
                             <State.State GHC.Integer.Type.Integer>_R
                             <Data.Either.Either e a>_N)))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <e>_N
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    TigerSeman.Estado TigerUnique.StGen>_R
                                 <a>_N))
                  (\ @ a (x11 :: GHC.Base.String) (ds :: TigerSeman.Estado) ->
                   GHC.Err.errorWithoutStackTrace
                     @ 'GHC.Types.LiftedRep
                     @ (State.State
                          GHC.Integer.Type.Integer
                          (Data.Either.Either e a, TigerSeman.Estado))
                     x11)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Base.String>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <TigerSeman.Estado>_N
                                 <State.State GHC.Integer.Type.Integer>_R
                                 <Data.Either.Either
                                    e a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N
                                                       <Control.Monad.Trans.State.Lazy.StateT
                                                          TigerSeman.Estado TigerUnique.StGen>_R
                                                       <a>_N)) -}
967618f5cbef97ffefaa69e9d1d499f8
  $fManticoreExceptT_$s$fMonadExceptT_$c>> ::
    Control.Monad.Trans.Except.ExceptT
      e
      (Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado TigerUnique.StGen)
      a
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         b
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(1*U,U),U)))><L,C(C1(U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Except.ExceptT
                            e
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen)
                            a)
                   (k :: Control.Monad.Trans.Except.ExceptT
                           e
                           (Control.Monad.Trans.State.Lazy.StateT
                              TigerSeman.Estado TigerUnique.StGen)
                           b)
                   (s1 :: TigerSeman.Estado) ->
                 let {
                   x11 :: State.State
                            GHC.Integer.Type.Integer
                            (Data.Either.Either e a, TigerSeman.Estado)
                   = m1
                       `cast`
                     (Control.Monad.Trans.Except.N:ExceptT[0]
                          <e>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             TigerSeman.Estado TigerUnique.StGen>_R
                          <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <TigerSeman.Estado>_N
                                      <State.State GHC.Integer.Type.Integer>_R
                                      <Data.Either.Either e a>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  case x11
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e a, TigerSeman.Estado)>_R)
                         s2 of wild { (,) x' s' ->
                  case x' of wild1 { (,) a1 s'1 ->
                  case a1 of wild2 {
                    Data.Either.Left e1 -> ((Data.Either.Left @ e @ b e1, s'1), s')
                    Data.Either.Right x12
                    -> (k `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <e>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                TigerSeman.Estado TigerUnique.StGen>_R
                             <b>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <TigerSeman.Estado>_N
                                         <State.State GHC.Integer.Type.Integer>_R
                                         <Data.Either.Either e b>_N)
                          s'1)
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e b, TigerSeman.Estado)>_R)
                         s' } } })
                   `cast`
                 (Sym (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either e b, TigerSeman.Estado)>_R)))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e
                    (Control.Monad.Trans.State.Lazy.StateT
                       TigerSeman.Estado TigerUnique.StGen)
                    a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT
                         e
                         (Control.Monad.Trans.State.Lazy.StateT
                            TigerSeman.Estado TigerUnique.StGen)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.Estado>_N
                               <State.State GHC.Integer.Type.Integer>_R
                               <Data.Either.Either
                                  e b>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N
                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                        TigerSeman.Estado TigerUnique.StGen>_R
                                                     <b>_N)) -}
605802a50701fc90b261fdc69e6c9b3d
  $fManticoreExceptT_$s$fMonadExceptT_$c>>= ::
    Control.Monad.Trans.Except.ExceptT
      e
      (Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado TigerUnique.StGen)
      a
    -> (a
        -> Control.Monad.Trans.Except.ExceptT
             e
             (Control.Monad.Trans.State.Lazy.StateT
                TigerSeman.Estado TigerUnique.StGen)
             b)
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(1*U,U),U)))><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Except.ExceptT
                            e
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen)
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Except.ExceptT
                              e
                              (Control.Monad.Trans.State.Lazy.StateT
                                 TigerSeman.Estado TigerUnique.StGen)
                              b)
                   (s1 :: TigerSeman.Estado) ->
                 let {
                   x11 :: State.State
                            GHC.Integer.Type.Integer
                            (Data.Either.Either e a, TigerSeman.Estado)
                   = m1
                       `cast`
                     (Control.Monad.Trans.Except.N:ExceptT[0]
                          <e>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             TigerSeman.Estado TigerUnique.StGen>_R
                          <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <TigerSeman.Estado>_N
                                      <State.State GHC.Integer.Type.Integer>_R
                                      <Data.Either.Either e a>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  case x11
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e a, TigerSeman.Estado)>_R)
                         s2 of wild { (,) x' s' ->
                  case x' of wild1 { (,) a1 s'1 ->
                  case a1 of wild2 {
                    Data.Either.Left e1 -> ((Data.Either.Left @ e @ b e1, s'1), s')
                    Data.Either.Right x12
                    -> ((k x12)
                          `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <e>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                TigerSeman.Estado TigerUnique.StGen>_R
                             <b>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <TigerSeman.Estado>_N
                                         <State.State GHC.Integer.Type.Integer>_R
                                         <Data.Either.Either e b>_N)
                          s'1)
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e b, TigerSeman.Estado)>_R)
                         s' } } })
                   `cast`
                 (Sym (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either e b, TigerSeman.Estado)>_R)))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e
                    (Control.Monad.Trans.State.Lazy.StateT
                       TigerSeman.Estado TigerUnique.StGen)
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Except.ExceptT
                            e
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen)
                            b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.Estado>_N
                               <State.State GHC.Integer.Type.Integer>_R
                               <Data.Either.Either
                                  e b>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N
                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                        TigerSeman.Estado TigerUnique.StGen>_R
                                                     <b>_N)) -}
674c914866de62606ae52ad9bca52238
  $fManticoreExceptT_$s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s (State.State GHC.Integer.Type.Integer))
                  (TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT @ s)
                  (TigerSeman.$fManticoreExceptT_$s$fMonadStateT_$c>>= @ s)
                  (TigerSeman.$fManticoreExceptT_$s$fMonadStateT_$c>> @ s)
                  (\ @ a (eta14 :: a) (eta15 :: s) ->
                   let {
                     a1 :: (a, s) = (eta14, eta15)
                   } in
                   (\ (s1 :: GHC.Integer.Type.Integer) -> (a1, s1))
                     `cast`
                   (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N))
                  (TigerSeman.$fManticoreExceptT_$s$fMonadStateT_$cfail @ s) -}
7cb28e1aa45bd297d9e212259cd9cf03
  $fManticoreExceptT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT
      s (State.State GHC.Integer.Type.Integer) a
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) b
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(A,1*U),1*U)))><L,C(C1(U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s (State.State GHC.Integer.Type.Integer) a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT
                           s (State.State GHC.Integer.Type.Integer) b)
                   (s1 :: s) ->
                 let {
                   x11 :: State.State GHC.Integer.Type.Integer (a, s)
                   = m1
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  let {
                    ds :: ((a, s), GHC.Integer.Type.Integer)
                    = x11
                        `cast`
                      (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)
                        s2
                  } in
                  (k `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)
                     (case ds of wild { (,) x' s' ->
                      case x' of wild1 { (,) a1 s'1 -> s'1 } }))
                    `cast`
                  (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)
                    (case ds of wild { (,) x' s' -> s' }))
                   `cast`
                 (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s (State.State GHC.Integer.Type.Integer) a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s (State.State GHC.Integer.Type.Integer) b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)) -}
cf492422517ceb788cd23f14cd7599b2
  $fManticoreExceptT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Lazy.StateT
      s (State.State GHC.Integer.Type.Integer) a
    -> (a
        -> Control.Monad.Trans.State.Lazy.StateT
             s (State.State GHC.Integer.Type.Integer) b)
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(1*U,1*U),1*U)))><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s (State.State GHC.Integer.Type.Integer) a)
                   (k :: a
                         -> Control.Monad.Trans.State.Lazy.StateT
                              s (State.State GHC.Integer.Type.Integer) b)
                   (s1 :: s) ->
                 let {
                   x11 :: State.State GHC.Integer.Type.Integer (a, s)
                   = m1
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  let {
                    ds :: ((a, s), GHC.Integer.Type.Integer)
                    = x11
                        `cast`
                      (State.N:State[0] <GHC.Integer.Type.Integer>_R <(a, s)>_R)
                        s2
                  } in
                  let {
                    ds1 :: (a, s) = case ds of wild { (,) x' s' -> x' }
                  } in
                  ((k (case ds1 of wild { (,) a1 s' -> a1 }))
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)
                     (case ds1 of wild { (,) a1 s' -> s' }))
                    `cast`
                  (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)
                    (case ds of wild { (,) x' s' -> s' }))
                   `cast`
                 (Sym (State.N:State[0] <GHC.Integer.Type.Integer>_R <(b, s)>_R)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s (State.State GHC.Integer.Type.Integer) a>_R
                 ->_R <a
                       -> Control.Monad.Trans.State.Lazy.StateT
                            s (State.State GHC.Integer.Type.Integer) b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <State.State GHC.Integer.Type.Integer>_R <b>_N)) -}
fbe6de4a1104b0e7aeb37a640bc74190
  $fManticoreExceptT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Lazy.StateT
         s (State.State GHC.Integer.Type.Integer) a
  {- Arity: 2, Strictness: <B,U><B,A>x, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s @ a (str :: GHC.Base.String) (ds :: s) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.LiftedRep
                   @ (State.State GHC.Integer.Type.Integer (a, s))
                   str)
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <State.State GHC.Integer.Type.Integer>_R <a>_N)) -}
4d73c07d2114c939a9a8b05d22f23b30
  $fManticoreExceptT_$sgo13 ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 4, Strictness: <L,U><S(SSS),1*U(U,U,U)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a1
                   (w :: Data.Text.Internal.Text)
                   (w1 :: Data.Text.Internal.Text)
                   (w2 :: a1)
                   (w3 :: Data.Map.Internal.Map Data.Text.Internal.Text a1) ->
                 case w1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 TigerSeman.$w$sgo13 @ a1 w ww1 ww2 ww3 w2 w3 }) -}
2038eacf8199066c4cf508d07c01e85c
  $fShowEstado :: GHC.Show.Show TigerSeman.Estado
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TigerSeman.Estado
                  TigerSeman.$fShowEstado_$cshowsPrec
                  TigerSeman.$fShowEstado_$cshow
                  TigerSeman.$fShowEstado_$cshowList -}
2038eacf8199066c4cf508d07c01e85c
  $fShowEstado1 :: TigerSeman.Estado -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: (\ (w :: TigerSeman.Estado) ->
                 case w of ww { TigerSeman.Est ww1 ww2 ->
                 TigerSeman.$w$cshowsPrec 0# ww1 ww2 }) -}
4e9dff541fe4a98f35c689eb8e23f1a0
  $fShowEstado2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
61b243b41641e64bc0720ed7a019e605
  $fShowEstado3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tEnv = "#) -}
8795ad98814f4dfb8545b6cd60ee2486
  $fShowEstado4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("vEnv = "#) -}
4264d3a7d952fcc7c70d44bb20f31c99
  $fShowEstado5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Est {"#) -}
11231f8df82acad16b224a32f3cd8b9b
  $fShowEstado6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2038eacf8199066c4cf508d07c01e85c
  $fShowEstado_$cshow :: TigerSeman.Estado -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x11 :: TigerSeman.Estado) ->
                 TigerSeman.$fShowEstado_$cshowsPrec
                   TigerSeman.$fShowEstado6
                   x11
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2038eacf8199066c4cf508d07c01e85c
  $fShowEstado_$cshowList :: [TigerSeman.Estado] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [TigerSeman.Estado]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TigerSeman.Estado
                   TigerSeman.$fShowEstado1
                   ls
                   s) -}
2038eacf8199066c4cf508d07c01e85c
  $fShowEstado_$cshowsPrec ::
    GHC.Types.Int -> TigerSeman.Estado -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: TigerSeman.Estado) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { TigerSeman.Est ww3 ww4 ->
                 TigerSeman.$w$cshowsPrec ww1 ww3 ww4 } }) -}
f2612c9c698b1a79b85795509a268cff
  $s$fApplicativeExceptT_$c<*>1 ::
    Control.Monad.Trans.Except.ExceptT
      e
      (Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado TigerUnique.StGen)
      (a -> b)
    -> Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         a
    -> TigerSeman.Estado
    -> State.State
         GHC.Integer.Type.Integer
         (Data.Either.Either e b, TigerSeman.Estado)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(U(1*U(1*U,U),U)))><L,C(C1(U(1*U(1*U,U),U)))><L,U>,
     Unfolding: (\ @ e
                   @ a
                   @ b
                   (w1 :: Control.Monad.Trans.Except.ExceptT
                            e
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen)
                            (a -> b))
                   (w2 :: Control.Monad.Trans.Except.ExceptT
                            e
                            (Control.Monad.Trans.State.Lazy.StateT
                               TigerSeman.Estado TigerUnique.StGen)
                            a)
                   (s1 :: TigerSeman.Estado) ->
                 let {
                   x11 :: State.State
                            GHC.Integer.Type.Integer
                            (Data.Either.Either e (a -> b), TigerSeman.Estado)
                   = w1
                       `cast`
                     (Control.Monad.Trans.Except.N:ExceptT[0]
                          <e>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             TigerSeman.Estado TigerUnique.StGen>_R
                          <a -> b>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <TigerSeman.Estado>_N
                                           <State.State GHC.Integer.Type.Integer>_R
                                           <Data.Either.Either e (a -> b)>_N)
                       s1
                 } in
                 (\ (s2 :: GHC.Integer.Type.Integer) ->
                  case x11
                         `cast`
                       (State.N:State[0]
                            <GHC.Integer.Type.Integer>_R
                            <(Data.Either.Either e (a -> b), TigerSeman.Estado)>_R)
                         s2 of wild { (,) x' s' ->
                  case x' of wild1 { (,) a1 s'1 ->
                  case a1 of wild2 {
                    Data.Either.Left e1 -> ((Data.Either.Left @ e @ b e1, s'1), s')
                    Data.Either.Right k
                    -> case (w2
                               `cast`
                             (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <e>_N
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     TigerSeman.Estado TigerUnique.StGen>_R
                                  <a>_N ; Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <TigerSeman.Estado>_N
                                              <State.State GHC.Integer.Type.Integer>_R
                                              <Data.Either.Either e a>_N)
                               s'1)
                              `cast`
                            (State.N:State[0]
                                 <GHC.Integer.Type.Integer>_R
                                 <(Data.Either.Either e a, TigerSeman.Estado)>_R)
                              s' of wild3 { (,) x'1 s'2 ->
                       case x'1 of wild4 { (,) a2 s'3 ->
                       case a2 of wild5 {
                         Data.Either.Left e1 -> ((Data.Either.Left @ e @ b e1, s'3), s'2)
                         Data.Either.Right x12
                         -> ((Data.Either.Right @ e @ b (k x12), s'3), s'2) } } } } } })
                   `cast`
                 (Sym (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either e b, TigerSeman.Estado)>_R))) -}
4c056f03cb7a778fc1d0017c4ac48ac8
  $sbool :: a -> a -> GHC.Types.Bool -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,1*U><S,1*U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ a (f :: a) (t :: a) (p :: GHC.Types.Bool) ->
                 case p of wild { GHC.Types.False -> f GHC.Types.True -> t }) -}
81b1f81484374c8d8be44bbe626b81d4
  $sfromList ::
    [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Data.Text.Internal.Text, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x11 ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ Data.Text.Internal.Text
                             @ a
                             1#
                             dt
                             x11
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> TigerSeman.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x11
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  wild2
                             GHC.Types.LT
                             -> TigerSeman.$wpoly_go1
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x11
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  wild2 } } } } } } }) -}
444ccfb47de6e64f8bdae364d6f6b73a
  $sfromList1 ::
    Data.Map.Internal.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
832a6ac937961605d677580a6767ba01
  $tc'Est :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2422633616460998634##
                   9594907727473330174##
                   TigerSeman.$trModule
                   TigerSeman.$tc'Est2
                   0#
                   TigerSeman.$tc'Est1) -}
548c1e95ee3f12e7acf9f38763858ff1
  $tc'Est1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3bafc8c4d87636b0dcb67ddd71d08cfd
  $tc'Est2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerSeman.$tc'Est3) -}
ba7784e79c7951dba9175327c9deae43
  $tc'Est3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Est"#) -}
16134a025c1444f729fb4a0d1ecde324
  $tcEstado :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12812862346097976709##
                   6423731762368122062##
                   TigerSeman.$trModule
                   TigerSeman.$tcEstado1
                   0#
                   GHC.Types.krep$*) -}
b185c95a294efbba6d7ac5664b5bff3d
  $tcEstado1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerSeman.$tcEstado2) -}
666820a22e949d2ea0046b8dbd712b41
  $tcEstado2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Estado"#) -}
65ba834b7dcd28ec4fdad268966c14c1
  $tcManticore :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5237082847264638363##
                   17324549243393418589##
                   TigerSeman.$trModule
                   TigerSeman.$tcManticore2
                   0#
                   TigerSeman.$tcManticore1) -}
3ca32599f3570ebc299908c96d355a49
  $tcManticore1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
93e799cc65b625544efb2f80cce77617
  $tcManticore2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerSeman.$tcManticore3) -}
6bf74db1418f59c712a4940e615afda6
  $tcManticore3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Manticore"#) -}
a327b1fe50b5a578c014caaf4558f34c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerSeman.$trModule3
                   TigerSeman.$trModule1) -}
bc60072574822f9ea485d7834b57ef7e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerSeman.$trModule2) -}
992802fbdcf48fcc66d1f9eb133a0bf3
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TigerSeman"#) -}
fec71170d950fba1d5a99b47470b7832
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerSeman.$trModule4) -}
2ea531b5295a07b3e2bfc6a41892e081
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HaskTiger-0.1.0.0-E2V2C9MNTGC8IfNMs3zKtJ"#) -}
e8fe6d1c53f9469c820822f6ea460124
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerSres.EnvEntry
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Map.Internal.Map
                             TigerSymbol.Symbol TigerSres.EnvEntry)
                   (ww2 :: Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Data.Text.Internal.Text
                       @ TigerSres.EnvEntry
                       Data.Text.Show.$fShowText
                       TigerSres.$fShowEnvEntry
                       0#
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Data.Text.Internal.Text
                       @ TigerTips.Tipo
                       Data.Text.Show.$fShowText
                       TigerTips.$fShowTipo
                       0#
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x11 :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        TigerSeman.$fShowEstado5
                        (GHC.CString.unpackAppendCString#
                           TigerSeman.$fShowEstado4
                           (f (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    TigerSeman.$fShowEstado3
                                    (f1
                                       (GHC.CString.unpackAppendCString#
                                          TigerSeman.$fShowEstado2
                                          x11))))))
                   1#
                   -> \ (x11 :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           TigerSeman.$fShowEstado5
                           (GHC.CString.unpackAppendCString#
                              TigerSeman.$fShowEstado4
                              (f (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       TigerSeman.$fShowEstado3
                                       (f1
                                          (GHC.CString.unpackAppendCString#
                                             TigerSeman.$fShowEstado2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x11)))))))) }) -}
c4874929dd1e6522fff3e29d6c071281
  $w$sgo13 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
608714a55b5e6f610b02d47c68b54b98
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
a48543c24029212b3f3278a8dcd08039
  $wouter3 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
a615bc318cd7bbfdef5c10ad08c5f6c8
  $wouter4 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
56559890722d5f03835a79a461d469ab
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
0ed24392a13e0f185ec0ecfa203b1cac
  $wpoly_go13 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map TigerSymbol.Symbol a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
6d10255264b56c4f00161efad00e5a8b
  $wsplitWith ::
    (a -> Data.Either.Either b c) -> [a] -> (# [b], [c] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: a -> Data.Either.Either b c)
                   (w1 :: [a]) ->
                 letrec {
                   $wgo1 :: [a] -> (# [b], [c] #)
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                   = \ (w2 :: [a]) ->
                     case w2 of wild {
                       [] -> (# GHC.Types.[] @ b, GHC.Types.[] @ c #)
                       : y ys
                       -> case w y of wild1 {
                            Data.Either.Left x11
                            -> case $wgo1 ys of ww { (#,#) ww1 ww2 ->
                               (# GHC.Types.: @ b x11 ww1, ww2 #) }
                            Data.Either.Right y1
                            -> case $wgo1 ys of ww { (#,#) ww1 ww2 ->
                               (# ww1, GHC.Types.: @ c y1 ww2 #) } } }
                 } in
                 $wgo1 w1) -}
11b3f97ace249513ea1359593db6cfa1
  $wtransDecs :: [TigerAbs.Dec] -> w a -> w a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ w :: * -> *
                   @ a
                   (w1 :: [TigerAbs.Dec])
                   (w2 :: w a) ->
                 case w1 of wild {
                   [] -> w2
                   : ds xs
                   -> case ds of wild1 {
                        DEFAULT -> w2
                        TigerAbs.TypeDec xs1 -> TigerSeman.transDecs2 @ w @ a xs1 } }) -}
2038eacf8199066c4cf508d07c01e85c
  data Estado
    = Est {vEnv :: Data.Map.Internal.Map
                     TigerSymbol.Symbol TigerSres.EnvEntry,
           tEnv :: Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo}
7941b71eddd4d493546339cbac30838e
  class (TigerErrores.Demon w, GHC.Base.Monad w,
         TigerUnique.UniqueGenerator w) =>
        Manticore (w :: * -> *) where
    insertValV :: TigerSymbol.Symbol
                  -> TigerSres.ValEntry -> w a -> w a
    insertFunV :: TigerSymbol.Symbol
                  -> TigerSres.FunEntry -> w a -> w a
    insertVRO :: TigerSymbol.Symbol -> w a -> w a
    insertTipoT :: TigerSymbol.Symbol -> TigerTips.Tipo -> w a -> w a
    getTipoFunV :: TigerSymbol.Symbol -> w TigerSres.FunEntry
    getTipoValV :: TigerSymbol.Symbol -> w TigerSres.ValEntry
    getTipoT :: TigerSymbol.Symbol -> w TigerTips.Tipo
    showVEnv :: w a -> w a
    showTEnv :: w a -> w a
    ugen :: w a -> w TigerUnique.Unique
    tiposIguales :: TigerTips.Tipo
                    -> TigerTips.Tipo -> w GHC.Types.Bool
    {-# MINIMAL insertValV, insertFunV, insertVRO, insertTipoT,
                getTipoFunV, getTipoValV, getTipoT, showVEnv, showTEnv, ugen,
                tiposIguales #-}
2038eacf8199066c4cf508d07c01e85c
  type Monada =
    Control.Monad.Trans.Except.ExceptT
      TigerSymbol.Symbol
      (Control.Monad.Trans.State.Lazy.StateT
         TigerSeman.Estado TigerUnique.StGen)
    :: * -> *
9c3b8a52a2c3b7f7a4f09f37868bbc62
  addDer :: ([a], [b]) -> b -> ([a], [b])
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (ds :: ([a], [b])) (b1 :: b) ->
                 case ds of wild { (,) as bs -> (as, GHC.Types.: @ b b1 bs) }) -}
a5bacc38f5d7256caceb5d0fed3e06d3
  addIzq :: ([a], [b]) -> a -> ([a], [b])
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (ds :: ([a], [b])) (a1 :: a) ->
                 case ds of wild { (,) as bs -> (GHC.Types.: @ a a1 as, bs) }) -}
bd8e69e96df0207b4eb6d50f747a55fd
  addpos ::
    (TigerErrores.Demon w, GHC.Show.Show b) => w a -> b -> w a
  {- Arity: 4,
     Strictness: <S(LC(C(S))LL),1*U(A,1*C1(C1(U)),A,A)><L,1*U(A,1*C1(U),A)><L,U><L,U>,
     Unfolding: (\ @ w :: * -> *
                   @ b
                   @ a
                   ($dDemon :: TigerErrores.Demon w)
                   ($dShow :: GHC.Show.Show b)
                   (t :: w a)
                   (p :: b) ->
                 TigerErrores.adder
                   @ w
                   $dDemon
                   @ a
                   t
                   (case GHC.Show.show @ b $dShow p of dt { DEFAULT ->
                    case GHC.Magic.runRW#
                           @ ('GHC.Types.TupleRep
                                '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                           @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   10#
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            TigerSeman.$wouter ipv1 4# dt 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                    ipv1 } })) -}
34f34ecc526930eb63e6d7a2c5022ac8
  autoRef ::
    TigerSymbol.Symbol
    -> TigerTips.Tipo -> TigerTips.Tipo -> TigerTips.Tipo
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(U,U,U)><L,1*U><S,1*U>,
     Unfolding: (\ (s :: TigerSymbol.Symbol)
                   (t :: TigerTips.Tipo)
                   (t' :: TigerTips.Tipo) ->
                 case t' of wild {
                   DEFAULT -> wild
                   TigerTips.RefRecord s'
                   -> case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case s' of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> wild
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> wild 0# -> t } } } } } }) -}
1f006407d2ff0c21092c5c74c5a3c5e8
  buscarM ::
    TigerSymbol.Symbol
    -> [(TigerSymbol.Symbol, TigerTips.Tipo, GHC.Types.Int)]
    -> GHC.Base.Maybe TigerTips.Tipo
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U,U,U)><S,1*U> -}
3bda03caaaa10ef4efcef5440f13baa9
  cmpZip ::
    (TigerErrores.Demon m, GHC.Base.Monad m) =>
    [(TigerSymbol.Symbol, TigerTips.Tipo)]
    -> [(TigerSymbol.Symbol, TigerTips.Tipo, GHC.Types.Int)] -> m ()
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(U),A,A,A)><L,1*U(A,A,A,1*C1(U),A)><S,1*U><S,1*U> -}
ce91c06adbfd36c7c43cc4948c7aa1bf
  cmpZip_$scmpZip ::
    [(TigerSymbol.Symbol, TigerTips.Tipo)]
    -> [(TigerSymbol.Symbol, TigerTips.Tipo, GHC.Types.Int)]
    -> Control.Monad.Trans.Except.ExceptT
         TigerSymbol.Symbol
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         ()
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
bd16fe5ddc0b4655cce21562e3d060ca
  depend :: TigerAbs.Ty -> [TigerSymbol.Symbol]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: TigerAbs.Ty) ->
                 case ds of wild {
                   TigerAbs.NameTy s
                   -> GHC.Types.:
                        @ TigerSymbol.Symbol
                        s
                        (GHC.Types.[] @ TigerSymbol.Symbol)
                   TigerAbs.RecordTy ts -> TigerSeman.depend_go ts
                   TigerAbs.ArrayTy s
                   -> GHC.Types.:
                        @ TigerSymbol.Symbol
                        s
                        (GHC.Types.[] @ TigerSymbol.Symbol) }) -}
5aed17cc4f8bdcb5192baf5af99d4f31
  depend_go ::
    [(TigerSymbol.Symbol, TigerAbs.Ty)] -> [TigerSymbol.Symbol]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
cde253066990e4fdfb2d873a4f2181dd
  errorTiposMsg ::
    (TigerErrores.Demon w, GHC.Show.Show p) =>
    p -> GHC.Base.String -> TigerTips.Tipo -> TigerTips.Tipo -> w a
  {- Arity: 6,
     Strictness: <S(LC(C(S))LL),U(1*C1(U),C(C1(U)),A,A)><L,1*U(A,1*C1(U),A)><L,U><L,1*U><L,1*U><L,1*U>,
     Unfolding: (\ @ w :: * -> *
                   @ p
                   @ a
                   ($dDemon :: TigerErrores.Demon w)
                   ($dShow :: GHC.Show.Show p)
                   (p1 :: p)
                   (msg :: GHC.Base.String)
                   (t1 :: TigerTips.Tipo)
                   (t2 :: TigerTips.Tipo) ->
                 TigerErrores.adder
                   @ w
                   $dDemon
                   @ a
                   (TigerErrores.adder
                      @ w
                      $dDemon
                      @ a
                      (TigerTips.errorTipos @ w @ a $dDemon t1 t2)
                      (case GHC.Magic.runRW#
                              @ ('GHC.Types.TupleRep
                                   '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                              @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.newByteArray#
                                      @ GHC.Prim.RealWorld
                                      10#
                                      s1 of ds1 { (#,#) ipv ipv1 ->
                               TigerSeman.$wouter4
                                 ipv1
                                 4#
                                 msg
                                 0#
                                 ipv }) of ds1 { (#,#) ipv ipv1 ->
                       ipv1 }))
                   (case GHC.Show.show @ p $dShow p1 of dt { DEFAULT ->
                    case GHC.Magic.runRW#
                           @ ('GHC.Types.TupleRep
                                '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                           @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   10#
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            TigerSeman.$wouter3 ipv1 4# dt 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                    ipv1 } })) -}
3d1f5473f1e6a32fc4bb8d5c6cc42d8c
  fromTy :: TigerSeman.Manticore w => TigerAbs.Ty -> w TigerTips.Tipo
  {- Arity: 2,
     Strictness: <S(LLLLLLLLLC(S)LLLL),1*U(A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ w :: * -> *
                   ($dManticore :: TigerSeman.Manticore w)
                   (ds :: TigerAbs.Ty) ->
                 case ds of wild {
                   DEFAULT -> TigerSeman.fromTy1 @ w
                   TigerAbs.NameTy s -> TigerSeman.getTipoT @ w $dManticore s }) -}
f567cf8df241720233ea2496baea73c9
  fromTy1 :: w TigerTips.Tipo
  {- Strictness: x -}
c752616b018993639604b9da52823887
  initConf :: TigerSeman.Estado
  {- Strictness: m,
     Unfolding: (TigerSeman.Est
                   TigerSeman.initConf5
                   TigerSeman.initConf1) -}
b1abecfab4758d662386b7d53b41f5a3
  initConf1 ::
    Data.Map.Internal.Map Data.Text.Internal.Text TigerTips.Tipo
  {- Unfolding: (case TigerSeman.initConf_kx0 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Text.Show.unpackCString#
                        TigerSeman.initConf3 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 TigerSeman.$w$sgo13
                   @ TigerTips.Tipo
                   ww
                   ww1
                   ww2
                   ww3
                   TigerSeman.initConf2
                   (Data.Map.Internal.Bin
                      @ Data.Text.Internal.Text
                      @ TigerTips.Tipo
                      1#
                      dt
                      TigerTips.TString
                      (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ TigerTips.Tipo)
                      (Data.Map.Internal.Tip
                         @ Data.Text.Internal.Text
                         @ TigerTips.Tipo)) } }) -}
9dc10ef8f816c03dad5293ff285142a7
  initConf10 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf48
                   TigerSeman.initConf11) -}
5102f9c5c457aacaafdbfa03c3b0692e
  initConf11 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf43
                   TigerSeman.initConf12) -}
80a76076858b2cf9b2f6d176f50a2f1f
  initConf12 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf36
                   TigerSeman.initConf13) -}
0fc2b331c46123b0e2b9f9708753376d
  initConf13 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf29
                   TigerSeman.initConf14) -}
8a3d0a6f19f6c947b867ba06dc01f49a
  initConf14 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf23
                   TigerSeman.initConf15) -}
e6edecdc4385540228e1754e2fc9eb40
  initConf15 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf16
                   (GHC.Types.[] @ (Data.Text.Internal.Text, TigerSres.EnvEntry))) -}
b8242f22051133defebd83d87667389e
  initConf16 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf20, TigerSeman.initConf17)) -}
89d0c30037a34b46430e768ea640ec28
  initConf17 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf18) -}
dd0296907c13569b2166c996937f3f24
  initConf18 ::
    (GHC.Integer.Type.Integer, Data.Text.Internal.Text,
     [TigerTips.Tipo], TigerTips.Tipo, TigerSres.Externa)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf22, TigerSeman.initConf20,
                  TigerSeman.initConf19, TigerTips.TUnit, TigerSres.Runtime)) -}
012af65458add243701f8f28174de113
  initConf19 :: [TigerTips.Tipo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerSeman.initConf2
                   (GHC.Types.[] @ TigerTips.Tipo)) -}
e2c71e170176e34d6080136f1c9c52f8
  initConf2 :: TigerTips.Tipo
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (TigerTips.TInt TigerTips.RW) -}
6a955b65da38e3a0e291cbe833d2f1df
  initConf20 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf21) -}
7cbaba7ba6727c27ac58fe6a85399391
  initConf21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("exit"#) -}
61e1c05382691754fc513eac18193c49
  initConf22 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
7e5f05d6714e7d14c70aeda3562e3bdf
  initConf23 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf27, TigerSeman.initConf24)) -}
f141221738b2d86e4436505e4d63a11b
  initConf24 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf25) -}
5134c020f2cc0845f2ee3af49f2f2ca0
  initConf25 ::
    (GHC.Integer.Type.Integer, Data.Text.Internal.Text,
     [TigerTips.Tipo], TigerTips.Tipo, TigerSres.Externa)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf22, TigerSeman.initConf27,
                  TigerSeman.initConf26, TigerTips.$bTBool, TigerSres.Runtime)) -}
c30bd8c77ad32edcbe62c818331cf3da
  initConf26 :: [TigerTips.Tipo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerTips.$bTBool
                   (GHC.Types.[] @ TigerTips.Tipo)) -}
ffa534868f2273b8a8f18bb688d870fc
  initConf27 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf28) -}
f91d3ce61c55372dbb823bd2446a513c
  initConf28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not"#) -}
db2ed78d6cbde60b25704e55cf1a2c32
  initConf29 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf34, TigerSeman.initConf30)) -}
a20cfe27d6fd9aad1a02f8243526bc16
  initConf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("string"#) -}
42a7a55eb6fbb726c3fda53edc11d098
  initConf30 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf31) -}
ac73b1ebd5032eb3e351dae72b7ac7ac
  initConf31 ::
    (GHC.Integer.Type.Integer, Data.Text.Internal.Text,
     [TigerTips.Tipo], TigerTips.Tipo, TigerSres.Externa)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf22, TigerSeman.initConf34,
                  TigerSeman.initConf32, TigerTips.TString, TigerSres.Runtime)) -}
a1b847dbd07650b5520e0411498dac0c
  initConf32 :: [TigerTips.Tipo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerTips.TString
                   TigerSeman.initConf33) -}
328d261c1c953e6d6a33ea2c31642554
  initConf33 :: [TigerTips.Tipo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerTips.TString
                   (GHC.Types.[] @ TigerTips.Tipo)) -}
8ae0727124d0e166261240118919a9f6
  initConf34 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf35) -}
8415ebf553ccd4194205623f45c3044c
  initConf35 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("concat"#) -}
6c7041975014a86dd0942d761028be4e
  initConf36 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf41, TigerSeman.initConf37)) -}
70a95d18b95e0917a4058c1d3114a56e
  initConf37 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf38) -}
2156ee7318d63c7a04fdecfda643ebea
  initConf38 ::
    (GHC.Integer.Type.Integer, Data.Text.Internal.Text,
     [TigerTips.Tipo], TigerTips.Tipo, TigerSres.Externa)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf22, TigerSeman.initConf41,
                  TigerSeman.initConf39, TigerTips.TString, TigerSres.Runtime)) -}
d9b95e6d1a3bfe5025f467eae674761a
  initConf39 :: [TigerTips.Tipo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerTips.TString
                   TigerSeman.initConf40) -}
7eaa4cd493ad547fcf3c358cbd4ddef9
  initConf4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("int"#) -}
e5e036e39ecbaaeaf6d291baffc9996a
  initConf40 :: [TigerTips.Tipo]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerSeman.initConf2
                   TigerSeman.initConf19) -}
cb24262570400591203d22e2a6bf4c6c
  initConf41 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf42) -}
79221c261b408f7e4065c1e0c671c66e
  initConf42 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("substring"#) -}
397d58aac9b1efc656a4fd03941c7381
  initConf43 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf46, TigerSeman.initConf44)) -}
a1ba37245de68fc7acc4d797574203bc
  initConf44 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf45) -}
9379feeb632b913a59f0800fbaff536f
  initConf45 ::
    (GHC.Integer.Type.Integer, Data.Text.Internal.Text,
     [TigerTips.Tipo], TigerTips.Tipo, TigerSres.Externa)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf22, TigerSeman.initConf46,
                  TigerSeman.initConf33, TigerSeman.initConf2, TigerSres.Runtime)) -}
64bb1a9ea6b4a95d51a021aff172162b
  initConf46 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf47) -}
bafefbe51343932e4700ffe35b5ac9b0
  initConf47 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("size"#) -}
63df8bc0b0d71f47c708b835104ab742
  initConf48 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf51, TigerSeman.initConf49)) -}
77dcaedcff9e4f25374a9503fc038ac0
  initConf49 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf50) -}
a3f25b48bac81794a80ad0550db3d724
  initConf5 ::
    Data.Map.Internal.Map Data.Text.Internal.Text TigerSres.EnvEntry
  {- Unfolding: (TigerSeman.$sfromList
                   @ TigerSres.EnvEntry
                   TigerSeman.initConf6) -}
05867d133a84a05a84aa214a4b394e3f
  initConf50 ::
    (GHC.Integer.Type.Integer, Data.Text.Internal.Text,
     [TigerTips.Tipo], TigerTips.Tipo, TigerSres.Externa)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf22, TigerSeman.initConf51,
                  TigerSeman.initConf19, TigerTips.TString, TigerSres.Runtime)) -}
54486d6b7eb54654bee89f14f2e8efd3
  initConf51 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf52) -}
a298063cce1c89892064073fc3ddae95
  initConf52 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("chr"#) -}
fabd59af68b853361dc4136d26f74526
  initConf53 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf56, TigerSeman.initConf54)) -}
7fa29845ac0f3cdb0c97f79b52918bb3
  initConf54 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf55) -}
97bb9126ac6a6697d0f1d12649af9e2e
  initConf55 ::
    (GHC.Integer.Type.Integer, Data.Text.Internal.Text,
     [TigerTips.Tipo], TigerTips.Tipo, TigerSres.Externa)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf22, TigerSeman.initConf56,
                  TigerSeman.initConf33, TigerSeman.initConf2, TigerSres.Runtime)) -}
becd826fbb6bf46921ec973c7994854c
  initConf56 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf57) -}
c91bda3d758856bb87b3d47d30d9e500
  initConf57 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ord"#) -}
6a1e73e578d65b66b24773712968e4ee
  initConf58 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf61, TigerSeman.initConf59)) -}
708cdb7e2602c2bcfcedaff17565629b
  initConf59 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf60) -}
022d905f58e40e9ab36472c55bd23f63
  initConf6 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf68
                   TigerSeman.initConf7) -}
eea6aea45a6b2f5d707e2962ea94b24b
  initConf60 ::
    (GHC.Integer.Type.Integer, Data.Text.Internal.Text,
     [TigerTips.Tipo], TigerTips.Tipo, TigerSres.Externa)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf22, TigerSeman.initConf61,
                  GHC.Types.[] @ TigerTips.Tipo, TigerTips.TString,
                  TigerSres.Runtime)) -}
7f28390a9ec999bbd47aa4f61227199d
  initConf61 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf62) -}
e18f95c4a06dece896e87c91c373eb7c
  initConf62 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("getchar"#) -}
de81c0f19215d64672260fd19a605367
  initConf63 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf66, TigerSeman.initConf64)) -}
52620449500340f1cdc2af5672b75109
  initConf64 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf65) -}
02be20f4c50435d7ac733e3f9a2ca111
  initConf65 ::
    (GHC.Integer.Type.Integer, Data.Text.Internal.Text,
     [TigerTips.Tipo], TigerTips.Tipo, TigerSres.Externa)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf22, TigerSeman.initConf66,
                  GHC.Types.[] @ TigerTips.Tipo, TigerTips.TUnit,
                  TigerSres.Runtime)) -}
08d376b4899280a095207539052f2dff
  initConf66 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf67) -}
aa061685c493ca4e138129c253d1ed04
  initConf67 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("flush"#) -}
ee35aa7c4411e9ba796b00a7997f9bbd
  initConf68 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf71, TigerSeman.initConf69)) -}
2fa38d516af14f6fc3208a4d1e075338
  initConf69 :: TigerSres.EnvEntry
  {- Strictness: m2,
     Unfolding: (TigerSres.Func TigerSeman.initConf70) -}
2b7a30cfba05cb31a011a45aa704b28e
  initConf7 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf63
                   TigerSeman.initConf8) -}
701ad044a5ffe306af366807b342dfa2
  initConf70 ::
    (GHC.Integer.Type.Integer, Data.Text.Internal.Text,
     [TigerTips.Tipo], TigerTips.Tipo, TigerSres.Externa)
  {- Strictness: m,
     Unfolding: ((TigerSeman.initConf22, TigerSeman.initConf71,
                  TigerSeman.initConf33, TigerTips.TUnit, TigerSres.Runtime)) -}
76fc987f43c725ceaf2cb5fb052b1d53
  initConf71 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf72) -}
3640048386db9b164919638575e16916
  initConf72 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("print"#) -}
9e591f34ca9303621c2104fa7721364c
  initConf8 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf58
                   TigerSeman.initConf9) -}
47e70d28c057c5d744543589250ede86
  initConf9 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf53
                   TigerSeman.initConf10) -}
de3ac2c94d9be9e94c384e5125aa9d74
  initConf_kx0 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   TigerSeman.initConf4) -}
febd850b5fb7b7dcafef2793b357ef7b
  insertRecordsAsRef ::
    TigerSeman.Manticore w =>
    [(TigerSymbol.Symbol, TigerAbs.Ty)] -> w a -> w a
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ w :: * -> * @ a ($dManticore :: TigerSeman.Manticore w) ->
                 TigerSeman.insertRecordsAsRef2 @ w @ a) -}
5f3782e36f3979d0054358e712ac8a8d
  insertRecordsAsRef2 ::
    [(TigerSymbol.Symbol, TigerAbs.Ty)] -> w a -> w a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ w :: * -> *
                   @ a
                   (ds :: [(TigerSymbol.Symbol, TigerAbs.Ty)])
                   (m :: w a) ->
                 case ds of wild {
                   [] -> m
                   : ds1 rs
                   -> case ds1 of wild1 { (,) rSym rTy ->
                      TigerSeman.insertRecordsAsRef3 @ w @ a } }) -}
70d9d68b3abc5e480a4e03ffbe698213
  insertRecordsAsRef3 :: w a
  {- Strictness: x -}
89fe36ad3f4448ab5be5e0dfc3e9f257
  insertSortedTys ::
    TigerSeman.Manticore w =>
    [(TigerSymbol.Symbol, TigerAbs.Ty)] -> w a -> w a
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ w :: * -> * @ a ($dManticore :: TigerSeman.Manticore w) ->
                 TigerSeman.insertSortedTys2 @ w @ a) -}
edaa87bff82cb723b7e863c2a2d3ace2
  insertSortedTys2 ::
    [(TigerSymbol.Symbol, TigerAbs.Ty)] -> w a -> w a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ w :: * -> *
                   @ a
                   (ds :: [(TigerSymbol.Symbol, TigerAbs.Ty)])
                   (m :: w a) ->
                 case ds of wild {
                   [] -> m
                   : ds1 ts
                   -> case ds1 of wild1 { (,) tSym tTy ->
                      TigerSeman.insertSortedTys3 @ w @ a } }) -}
98d2d9171b0f76f0e435a673d7290cb7
  insertSortedTys3 :: w a
  {- Strictness: x -}
7d0e19a576ba2d3c7da7ed8b36c3ce42
  runMonada ::
    TigerSeman.Monada ((), TigerTips.Tipo)
    -> TigerUnique.StGen
         (Data.Either.Either TigerSymbol.Symbol ((), TigerTips.Tipo))
  {- Arity: 1, Strictness: <L,1*C1(C(U(1*U(1*U,A),1*U)))>,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.runMonada_f
                  `cast`
                (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                          <TigerSymbol.Symbol>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             TigerSeman.Estado (State.State GHC.Integer.Type.Integer)>_R
                          <((), TigerTips.Tipo)>_N)
                 ->_R <State.State
                         GHC.Integer.Type.Integer
                         (Data.Either.Either TigerSymbol.Symbol ((), TigerTips.Tipo))>_R) -}
a77cda3f71451812ccf4d0dfb9d8a8d1
  runMonada_f ::
    Control.Monad.Trans.State.Lazy.StateT
      TigerSeman.Estado
      (State.State GHC.Integer.Type.Integer)
      (Data.Either.Either TigerSymbol.Symbol ((), TigerTips.Tipo))
    -> State.State
         GHC.Integer.Type.Integer
         (Data.Either.Either TigerSymbol.Symbol ((), TigerTips.Tipo))
  {- Arity: 1, Strictness: <L,1*C1(C(U(1*U(1*U,A),1*U)))>,
     Unfolding: (\ (y :: Control.Monad.Trans.State.Lazy.StateT
                           TigerSeman.Estado
                           (State.State GHC.Integer.Type.Integer)
                           (Data.Either.Either TigerSymbol.Symbol ((), TigerTips.Tipo))) ->
                 let {
                   x11 :: State.State
                            GHC.Integer.Type.Integer
                            (Data.Either.Either TigerSymbol.Symbol ((), TigerTips.Tipo),
                             TigerSeman.Estado)
                   = y `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <TigerSeman.Estado>_N
                          <State.State GHC.Integer.Type.Integer>_R
                          <Data.Either.Either TigerSymbol.Symbol ((), TigerTips.Tipo)>_N)
                       TigerSeman.initConf
                 } in
                 (\ (s1 :: GHC.Integer.Type.Integer) ->
                  let {
                    ds :: ((Data.Either.Either TigerSymbol.Symbol ((), TigerTips.Tipo),
                            TigerSeman.Estado),
                           GHC.Integer.Type.Integer)
                    = x11
                        `cast`
                      (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <(Data.Either.Either TigerSymbol.Symbol ((), TigerTips.Tipo),
                             TigerSeman.Estado)>_R)
                        s1
                  } in
                  (case ds of wild { (,) x' s' ->
                   case x' of wild1 { (,) a1 ds1 -> a1 } },
                   case ds of wild { (,) x' s' -> s' }))
                   `cast`
                 (Sym (State.N:State[0]
                           <GHC.Integer.Type.Integer>_R
                           <Data.Either.Either
                              TigerSymbol.Symbol ((), TigerTips.Tipo)>_R))) -}
138e8390c73b3285248c69c27df239d3
  runSeman ::
    TigerAbs.Exp
    -> TigerUnique.StGen
         (Data.Either.Either TigerSymbol.Symbol ((), TigerTips.Tipo))
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x11 :: TigerAbs.Exp) ->
                 TigerSeman.runMonada_f
                   (TigerSeman.runSeman_$stransExp x11)
                     `cast`
                   (Control.Monad.Trans.Except.N:ExceptT[0]
                        <TigerSymbol.Symbol>_N
                        <Control.Monad.Trans.State.Lazy.StateT
                           TigerSeman.Estado (State.State GHC.Integer.Type.Integer)>_R
                        <((), TigerTips.Tipo)>_N)) -}
6bd494d343bedfc52faf678d7ea345e9
  runSeman_$stransExp ::
    TigerAbs.Exp
    -> Control.Monad.Trans.Except.ExceptT
         TigerSymbol.Symbol
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         ((), TigerTips.Tipo)
  {- Arity: 1, Strictness: <S,1*U> -}
b426e6b83dcb53b5cd4d01906c141dc9
  splitWith :: (a -> Data.Either.Either b c) -> [a] -> ([b], [c])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b @ c (w :: a -> Data.Either.Either b c) (w1 :: [a]) ->
                 case TigerSeman.$wsplitWith
                        @ a
                        @ b
                        @ c
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
2038eacf8199066c4cf508d07c01e85c
  tEnv ::
    TigerSeman.Estado
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerTips.Tipo
  RecSel Left TigerSeman.Estado
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerSeman.Estado) ->
                 case ds of wild { TigerSeman.Est ds1 ds2 -> ds2 }) -}
343496719bb0a06a6474888326473090
  tiposComparables ::
    TigerTips.Tipo -> TigerTips.Tipo -> TigerAbs.Oper -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U>,
     Unfolding: (\ (ds :: TigerTips.Tipo)
                   (ds1 :: TigerTips.Tipo)
                   (ds2 :: TigerAbs.Oper) ->
                 let {
                   fail :: GHC.Prim.Void# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds3 :: GHC.Prim.Void#)[OneShot] ->
                     case ds2 of wild {
                       DEFAULT
                       -> case ds of wild1 {
                            DEFAULT -> GHC.Types.True
                            TigerTips.TUnit
                            -> case wild of wild2 {
                                 DEFAULT -> GHC.Types.True TigerAbs.NeqOp -> GHC.Types.False }
                            TigerTips.TNil
                            -> case ds1 of wild2 {
                                 DEFAULT -> GHC.Types.True
                                 TigerTips.TNil
                                 -> case wild of wild3 {
                                      DEFAULT -> GHC.Types.True
                                      TigerAbs.NeqOp -> GHC.Types.False } } }
                       TigerAbs.EqOp -> GHC.Types.True }
                 } in
                 case ds of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   TigerTips.TUnit
                   -> case ds2 of wild1 {
                        DEFAULT -> fail GHC.Prim.void# TigerAbs.EqOp -> GHC.Types.False }
                   TigerTips.TNil
                   -> case ds1 of wild1 {
                        DEFAULT -> fail GHC.Prim.void#
                        TigerTips.TNil
                        -> case ds2 of wild2 {
                             DEFAULT -> fail GHC.Prim.void#
                             TigerAbs.EqOp -> GHC.Types.False } } }) -}
8250d9bb731373213def2005f9231bd3
  transDecs :: TigerSeman.Manticore w => [TigerAbs.Dec] -> w a -> w a
  {- Arity: 3, Strictness: <L,A><S,1*U><S,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ w :: * -> *
                   @ a
                   (w1 :: TigerSeman.Manticore w)
                   (w2 :: [TigerAbs.Dec])
                   (w3 :: w a) ->
                 TigerSeman.$wtransDecs @ w @ a w2 w3) -}
081c70a084d51f463a8df1e00d9627fc
  transDecs1 ::
    [(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)]
    -> Control.Monad.Trans.Except.ExceptT
         TigerSymbol.Symbol
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         a
  {- Arity: 1, Strictness: <B,1*U>x -}
b2cf4368f580905fbfb851513bb50260
  transDecs2 ::
    [(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)] -> w a
  {- Arity: 1, Strictness: <B,1*U>x -}
db794d90ded99ea1d12d05739ff2a79a
  transExp ::
    TigerSeman.Manticore w => TigerAbs.Exp -> w ((), TigerTips.Tipo)
  {- Arity: 1,
     Strictness: <L,U(U(C(U),C(C1(U)),C(U),A),U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),C(U)),A,A,A,A,A,A,C(U),C(U),A,A,A,C(C1(U)))> -}
8bd784c828c9a9b6d0fdd929f5302715
  transTy ::
    TigerSeman.Manticore w => TigerAbs.Ty -> w TigerTips.Tipo
  {- Arity: 2,
     Strictness: <S,U(A,U(A,C(C1(U)),A,U,A),U,A,A,A,A,A,A,C(U),A,A,A,A)><S,1*U> -}
d92b5f083759db1231d667e255d00e30
  transVar ::
    TigerSeman.Manticore w => TigerAbs.Var -> w ((), TigerTips.Tipo)
  {- Arity: 2,
     Strictness: <S(LS(LC(C(S))LLL)LLLLLLLLLLLL),U(U(C(U),C(C1(U)),C(U),A),U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),C(U)),A,A,A,A,A,A,C(U),C(U),A,A,A,C(C1(U)))><S,1*U> -}
8df3b4b2f88c09e01a5d1838786a0c15
  transVar_$stransVar ::
    TigerAbs.Var
    -> Control.Monad.Trans.Except.ExceptT
         TigerSymbol.Symbol
         (Control.Monad.Trans.State.Lazy.StateT
            TigerSeman.Estado TigerUnique.StGen)
         ((), TigerTips.Tipo)
  {- Arity: 1, Strictness: <S,1*U> -}
f64f3f24e70372b316ec8941dde37ab7
  updateRefs ::
    TigerSeman.Manticore w =>
    TigerSymbol.Symbol
    -> TigerTips.Tipo -> TigerSymbol.Symbol -> w a -> w a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LS(LC(C(S))LLL)LLLLLLLLLLLL),U(A,1*U(A,1*C1(C1(U)),A,A,A),A,A,A,A,C(C1(C1(U))),A,A,1*C1(U),A,A,A,A)><L,U(U,U,U)><L,U><L,U><L,U>,
     Unfolding: (\ @ w :: * -> *
                   @ a
                   ($dManticore :: TigerSeman.Manticore w)
                   (eta14 :: TigerSymbol.Symbol)
                   (eta15 :: TigerTips.Tipo)
                   (eta16 :: TigerSymbol.Symbol)
                   (eta17 :: w a) ->
                 GHC.Base.>>=
                   @ w
                   (TigerSeman.$p2Manticore @ w $dManticore)
                   @ TigerTips.Tipo
                   @ a
                   (TigerSeman.getTipoT @ w $dManticore eta16)
                   (\ (t' :: TigerTips.Tipo) ->
                    TigerSeman.insertTipoT
                      @ w
                      $dManticore
                      @ a
                      eta16
                      (case t' of wild {
                         DEFAULT -> wild
                         TigerTips.RefRecord s'
                         -> case eta14 of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                            case s' of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                            case GHC.Prim.==# dt2 dt5 of lwild {
                              DEFAULT -> wild
                              1#
                              -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                -> GHC.Prim.Word#
                                                                -> GHC.Prim.ByteArray#
                                                                -> GHC.Prim.Word#
                                                                -> GHC.Prim.Word#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Int# #)}
                                        dt
                                        (GHC.Prim.int2Word# dt1)
                                        dt3
                                        (GHC.Prim.int2Word# dt4)
                                        (GHC.Prim.int2Word# dt2)
                                        GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                 case GHC.Prim.narrow32Int# ds3 of wild3 {
                                   DEFAULT -> wild 0# -> eta15 } } } } } })
                      eta17)) -}
2038eacf8199066c4cf508d07c01e85c
  vEnv ::
    TigerSeman.Estado
    -> Data.Map.Internal.Map TigerSymbol.Symbol TigerSres.EnvEntry
  RecSel Left TigerSeman.Estado
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerSeman.Estado) ->
                 case ds of wild { TigerSeman.Est ds1 ds2 -> ds1 }) -}
instance TigerErrores.Demon [Control.Monad.Trans.Except.ExceptT]
  = TigerSeman.$fDemonExceptT
instance TigerSeman.Manticore [Control.Monad.Trans.Except.ExceptT]
  = TigerSeman.$fManticoreExceptT
instance GHC.Show.Show [TigerSeman.Estado]
  = TigerSeman.$fShowEstado
"SPEC cmpZip @ (ExceptT Symbol (StateT Estado StGen))" forall ($dMonad :: GHC.Base.Monad
                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                               TigerSymbol.Symbol
                                                                               (Control.Monad.Trans.State.Lazy.StateT
                                                                                  TigerSeman.Estado
                                                                                  TigerUnique.StGen)))
                                                              ($dDemon :: TigerErrores.Demon
                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                               TigerSymbol.Symbol
                                                                               (Control.Monad.Trans.State.Lazy.StateT
                                                                                  TigerSeman.Estado
                                                                                  TigerUnique.StGen)))
  TigerSeman.cmpZip @ (Control.Monad.Trans.Except.ExceptT
                         TigerSymbol.Symbol
                         (Control.Monad.Trans.State.Lazy.StateT
                            TigerSeman.Estado TigerUnique.StGen))
                    $dDemon
                    $dMonad
  = TigerSeman.cmpZip_$scmpZip
"SPEC transExp @ (ExceptT Symbol (StateT Estado StGen))" forall ($dManticore :: TigerSeman.Manticore
                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                     TigerSymbol.Symbol
                                                                                     (Control.Monad.Trans.State.Lazy.StateT
                                                                                        TigerSeman.Estado
                                                                                        TigerUnique.StGen)))
  TigerSeman.transExp @ (Control.Monad.Trans.Except.ExceptT
                           TigerSymbol.Symbol
                           (Control.Monad.Trans.State.Lazy.StateT
                              TigerSeman.Estado TigerUnique.StGen))
                      $dManticore
  = TigerSeman.runSeman_$stransExp
"SPEC transVar @ (ExceptT Symbol (StateT Estado StGen))" forall ($dManticore :: TigerSeman.Manticore
                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                     TigerSymbol.Symbol
                                                                                     (Control.Monad.Trans.State.Lazy.StateT
                                                                                        TigerSeman.Estado
                                                                                        TigerUnique.StGen)))
  TigerSeman.transVar @ (Control.Monad.Trans.Except.ExceptT
                           TigerSymbol.Symbol
                           (Control.Monad.Trans.State.Lazy.StateT
                              TigerSeman.Estado TigerUnique.StGen))
                      $dManticore
  = TigerSeman.transVar_$stransVar
"SPEC/TigerSeman $fApplicativeExceptT @ (StateT Estado StGen) _" forall @ e
                                                                        (v1 :: GHC.Base.Monad
                                                                                 (Control.Monad.Trans.State.Lazy.StateT
                                                                                    TigerSeman.Estado
                                                                                    TigerUnique.StGen))
                                                                        (v :: GHC.Base.Functor
                                                                                (Control.Monad.Trans.State.Lazy.StateT
                                                                                   TigerSeman.Estado
                                                                                   TigerUnique.StGen))
  Control.Monad.Trans.Except.$fApplicativeExceptT @ (Control.Monad.Trans.State.Lazy.StateT
                                                       TigerSeman.Estado TigerUnique.StGen)
                                                  @ e
                                                  v
                                                  v1
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeExceptT @ e
"SPEC/TigerSeman $fApplicativeExceptT_$c*> @ (StateT Estado StGen) _" forall @ e
                                                                             ($dMonad :: GHC.Base.Monad
                                                                                           (Control.Monad.Trans.State.Lazy.StateT
                                                                                              TigerSeman.Estado
                                                                                              TigerUnique.StGen))
                                                                             ($dFunctor :: GHC.Base.Functor
                                                                                             (Control.Monad.Trans.State.Lazy.StateT
                                                                                                TigerSeman.Estado
                                                                                                TigerUnique.StGen))
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c*> @ (Control.Monad.Trans.State.Lazy.StateT
                                                            TigerSeman.Estado TigerUnique.StGen)
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeExceptT_$c*> @ e
"SPEC/TigerSeman $fApplicativeExceptT_$cpure @ (StateT
                                                 Estado StGen) _" forall @ e
                                                                                                                                ($dMonad :: GHC.Base.Monad
                                                                                                                                              (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                 TigerSeman.Estado
                                                                                                                                                 TigerUnique.StGen))
                                                                                                                                ($dFunctor :: GHC.Base.Functor
                                                                                                                                                (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                   TigerSeman.Estado
                                                                                                                                                   TigerUnique.StGen))
  Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure @ (Control.Monad.Trans.State.Lazy.StateT
                                                              TigerSeman.Estado TigerUnique.StGen)
                                                         @ e
                                                         $dFunctor
                                                         $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeExceptT_$cpure @ e
"SPEC/TigerSeman $fApplicativeStateT @ (State Integer) _" [orphan] forall @ s
                                                                          (v1 :: GHC.Base.Monad
                                                                                   (State.State
                                                                                      GHC.Integer.Type.Integer))
                                                                          (v :: GHC.Base.Functor
                                                                                  (State.State
                                                                                     GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT @ (State.State
                                                          GHC.Integer.Type.Integer)
                                                     @ s
                                                     v
                                                     v1
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT @ s
"SPEC/TigerSeman $fApplicativeStateT_$c*> @ (State Integer) _" [orphan] forall @ s
                                                                               ($dMonad :: GHC.Base.Monad
                                                                                             (State.State
                                                                                                GHC.Integer.Type.Integer))
                                                                               ($dFunctor :: GHC.Base.Functor
                                                                                               (State.State
                                                                                                  GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*> @ (State.State
                                                               GHC.Integer.Type.Integer)
                                                          @ s
                                                          $dFunctor
                                                          $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT_$c*> @ s
"SPEC/TigerSeman $fApplicativeStateT_$c<*> @ (State Integer) _" [orphan] forall @ s
                                                                                ($dMonad :: GHC.Base.Monad
                                                                                              (State.State
                                                                                                 GHC.Integer.Type.Integer))
                                                                                ($dFunctor :: GHC.Base.Functor
                                                                                                (State.State
                                                                                                   GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*> @ (State.State
                                                                GHC.Integer.Type.Integer)
                                                           @ s
                                                           $dFunctor
                                                           $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT_$c<*> @ s
"SPEC/TigerSeman $fApplicativeStateT_$cpure @ (State Integer) _" [orphan] forall @ s
                                                                                 ($dMonad :: GHC.Base.Monad
                                                                                               (State.State
                                                                                                  GHC.Integer.Type.Integer))
                                                                                 ($dFunctor :: GHC.Base.Functor
                                                                                                 (State.State
                                                                                                    GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure @ (State.State
                                                                 GHC.Integer.Type.Integer)
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fApplicativeStateT_$cpure @ s
"SPEC/TigerSeman $fFunctorExceptT @ (StateT Estado StGen) _" forall @ e
                                                                    (v :: GHC.Base.Functor
                                                                            (Control.Monad.Trans.State.Lazy.StateT
                                                                               TigerSeman.Estado
                                                                               TigerUnique.StGen))
  Control.Monad.Trans.Except.$fFunctorExceptT @ (Control.Monad.Trans.State.Lazy.StateT
                                                   TigerSeman.Estado TigerUnique.StGen)
                                              @ e
                                              v
  = TigerSeman.$fManticoreExceptT_$s$fFunctorExceptT @ e
"SPEC/TigerSeman $fFunctorStateT @ (State Integer) _" [orphan] forall @ s
                                                                      (v :: GHC.Base.Functor
                                                                              (State.State
                                                                                 GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fFunctorStateT @ (State.State
                                                      GHC.Integer.Type.Integer)
                                                 @ s
                                                 v
  = TigerSeman.$fManticoreExceptT_$s$fFunctorStateT @ s
"SPEC/TigerSeman $fMonadExceptT @ (StateT Estado StGen) _" forall @ e
                                                                  (v :: GHC.Base.Monad
                                                                          (Control.Monad.Trans.State.Lazy.StateT
                                                                             TigerSeman.Estado
                                                                             TigerUnique.StGen))
  Control.Monad.Trans.Except.$fMonadExceptT @ (Control.Monad.Trans.State.Lazy.StateT
                                                 TigerSeman.Estado TigerUnique.StGen)
                                            @ e
                                            v
  = TigerSeman.$fManticoreExceptT_$s$fMonadExceptT @ e
"SPEC/TigerSeman $fMonadExceptT_$c>> @ (StateT Estado StGen) _" forall @ e
                                                                       ($dMonad :: GHC.Base.Monad
                                                                                     (Control.Monad.Trans.State.Lazy.StateT
                                                                                        TigerSeman.Estado
                                                                                        TigerUnique.StGen))
  Control.Monad.Trans.Except.$fMonadExceptT_$c>> @ (Control.Monad.Trans.State.Lazy.StateT
                                                      TigerSeman.Estado TigerUnique.StGen)
                                                 @ e
                                                 $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fMonadExceptT_$c>> @ e
"SPEC/TigerSeman $fMonadExceptT_$c>>= @ (StateT Estado StGen) _" forall @ e
                                                                        ($dMonad :: GHC.Base.Monad
                                                                                      (Control.Monad.Trans.State.Lazy.StateT
                                                                                         TigerSeman.Estado
                                                                                         TigerUnique.StGen))
  Control.Monad.Trans.Except.$fMonadExceptT_$c>>= @ (Control.Monad.Trans.State.Lazy.StateT
                                                       TigerSeman.Estado TigerUnique.StGen)
                                                  @ e
                                                  $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fMonadExceptT_$c>>= @ e
"SPEC/TigerSeman $fMonadStateT @ (State Integer) _" [orphan] forall @ s
                                                                    (v :: GHC.Base.Monad
                                                                            (State.State
                                                                               GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fMonadStateT @ (State.State
                                                    GHC.Integer.Type.Integer)
                                               @ s
                                               v
  = TigerSeman.$fManticoreExceptT_$s$fMonadStateT @ s
"SPEC/TigerSeman $fMonadStateT_$c>> @ (State Integer) _" [orphan] forall @ s
                                                                         ($dMonad :: GHC.Base.Monad
                                                                                       (State.State
                                                                                          GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ (State.State
                                                         GHC.Integer.Type.Integer)
                                                    @ s
                                                    $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fMonadStateT_$c>> @ s
"SPEC/TigerSeman $fMonadStateT_$c>>= @ (State Integer) _" [orphan] forall @ s
                                                                          ($dMonad :: GHC.Base.Monad
                                                                                        (State.State
                                                                                           GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>= @ (State.State
                                                          GHC.Integer.Type.Integer)
                                                     @ s
                                                     $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fMonadStateT_$c>>= @ s
"SPEC/TigerSeman $fMonadStateT_$cfail @ (State Integer) _" [orphan] forall @ s
                                                                           ($dMonad :: GHC.Base.Monad
                                                                                         (State.State
                                                                                            GHC.Integer.Type.Integer))
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cfail @ (State.State
                                                           GHC.Integer.Type.Integer)
                                                      @ s
                                                      $dMonad
  = TigerSeman.$fManticoreExceptT_$s$fMonadStateT_$cfail @ s
"SPEC/TigerSeman bool @ Bool _" [orphan] forall @ a
                                                ($dToBool :: Control.Conditional.ToBool
                                                               GHC.Types.Bool)
  Control.Conditional.bool @ GHC.Types.Bool @ a $dToBool
  = TigerSeman.$sbool @ a
"SPEC/TigerSeman fromList @ Text _" [orphan] forall @ a
                                                    ($dOrd :: GHC.Classes.Ord
                                                                Data.Text.Internal.Text)
  Data.Map.Internal.fromList @ Data.Text.Internal.Text @ a $dOrd
  = TigerSeman.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

