
==================== FINAL INTERFACE ====================
2019-06-15 23:18:27.023985922 UTC

interface HaskTiger-0.1.0.0-E2V2C9MNTGC8IfNMs3zKtJ:TigerParser 8043
  interface hash: 7bf1d41203e57267498c37e8f2df45be
  ABI hash: 08ee935ede5b6811b1d06e65a545d374
  export-list hash: 3f7236a1f1b97fce0f14cc06024617af
  orphan hash: f855e4e10baab1c15a4eb8c5ff295748
  flag hash: 84a707957232ceed2ddebd5ca4ca265a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerParser.amperCmp
  TigerParser.arrayexp
  TigerParser.arrty
  TigerParser.assignexp
  TigerParser.binary
  TigerParser.breakexp
  TigerParser.callexp
  TigerParser.declarations
  TigerParser.expression
  TigerParser.expression'
  TigerParser.field
  TigerParser.field'
  TigerParser.forexp
  TigerParser.ftype
  TigerParser.functiondec
  TigerParser.fundec
  TigerParser.gline
  TigerParser.ifexp
  TigerParser.int
  TigerParser.letexp
  TigerParser.mTypo
  TigerParser.namety
  TigerParser.nilexp
  TigerParser.parse
  TigerParser.parseFromFile
  TigerParser.parseFromStr
  TigerParser.parseexp
  TigerParser.pipeCmp
  TigerParser.recfld
  TigerParser.recordexp
  TigerParser.rety
  TigerParser.seqexp
  TigerParser.seqexpWOut
  TigerParser.stringexp
  TigerParser.table
  TigerParser.ty
  TigerParser.tydec
  TigerParser.tydecs
  TigerParser.unitexp
  TigerParser.v'
  TigerParser.vardec
  TigerParser.varexp
  TigerParser.variable
  TigerParser.whileexp
module dependencies: TigerAbs TigerLexer TigerSymbol
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0
                      syb-0.7 text-1.2.3.0 transformers-0.5.5.0
orphans: syb-0.7:Data.Generics.Instances
         text-1.2.3.0:Data.Text.Lazy
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
import  -/  TigerAbs 039cda3126c7cc999dbdd3c9a8fcaa0d
  exports: 7916be92b0d3730e8979910ab1e541e2
  ArrayExp 7383ba03887031b09c2b2610ee7b42d8
  ArrayTy f4fbd47e48f2bdead7995718692e03ba
  AssignExp 6a67d04cc8d2f051dd8ef69daca75614
  BreakExp 69638d4e11d257d05f5457a454aca91a
  CallExp 08557e74fa41925815c378121b19cf92
  Dec 88da78297a197b572c2b5511c12295ec
  DivideOp 4ccf8088b1af0300a6c831a623f13033
  EqOp 1f6228ed2b1ffa6fd112682bddd197d5
  Escapa e3f65af3a49221270bc3669d293e8d45
  Exp 88da78297a197b572c2b5511c12295ec
  FieldVar 2d21fb03afda92d359c055ac6fa57ab4
  ForExp 78bbd9844439d32fb170c98dfd2ba4a8
  FunctionDec b1030fbee71edc48e84cc15dad1ea254
  GeOp 2a761d5f0c6882b86e02d50e46b69f56
  GtOp f50fa7f1caeb84e0579dd2e040d0514e
  IfExp a6a5ceca74fc9219632624bf0bd1e04f
  IntExp 676e6a6860d134a71c15cf261db71517
  LeOp 46081327bd170acffd3866cdd4decfd7
  LetExp 49c4a9268224f23d2061787bc44ec4f9
  LtOp ec015bf1e2693465411a441c7dc6157d
  MinusOp 7a7aeed7509db95e9964f1dedc847c44
  NameTy 347a1b2bd97d0dc6010bf8349303e0d7
  NeqOp 4206623e419b41f55dc8c0703915d3f8
  NilExp 3e2421cee4557b1502a9ad03f0a7bb4c
  NoEscapa 33ea8a6aaeea3bda4aad8f6d4f800d41
  OpExp d86c5f78abdc1a387d7739ebbb8143ab
  PlusOp 9573c18b9b98da4fa86754e2abaf1824
  Pos dc5808af641bae4f269e80ae5ca31de0
  Range a9b39bf248f1adb51bf38c88f811a8e8
  RecordExp f5293213a411bdd3310e1dafc6ee6c5c
  RecordTy c0c73586cebaecb02f655cb3e603c0e4
  SeqExp 2ae5d114355569734b170ada174210e0
  Simple 16bd0b1b20e22196088caa8993d89e7b
  SimpleVar 2e2d1e60cba1021b219ac203f1896cd8
  StringExp 8610114bb24fc8f1fa09d6f04f384601
  SubscriptVar cf976665e1103c523bf166531d987c73
  TimesOp f02b5fd36f207a47cd79dc7f804f4378
  Ty bc7a1a3365d4f3c8280578c938b919c6
  TypeDec 569e0bdac2e43863e7d7a25fcd3b8e78
  UnitExp c0bd16d1f508d892e8682a0af37303a5
  Var 88da78297a197b572c2b5511c12295ec
  VarDec 8a8f455ed0081c2bb28afae7a173e9c9
  VarExp edfae8fce3b5f2c0396f3545e0f571d0
  WhileExp 1553436d1baa7fca770ec1bb996a3af1
import  -/  TigerLexer aecd5fe9390fa7876dbccaaf327a2bb9
  exports: be1417a7f59cd11ba2c2488527a0e3de
  braces 6ffdad4875409409dc01c81234067df4
  brackets 7055e122943386b0b997e42c29f64968
  colon ee2923322ff9bf84bf046821b9a4d742
  commaSep a37864db8cd1b71467c1f2dff70ad8a1
  dot 3ecceeb7a1d226c35f3ca9175d319312
  identifier 4806b4f4a9e1678af0a30ccad581cb35
  number d600884a5d539c2574259b5f27d75dc5
  parens 6a4a38afd3d5fcfbf69fdf164a6705d8
  reserved 85f7c0ad0b657b6f690e45ffb5465a74
  reservedOp dce1373f235b0a5d50623d41c81208f4
  semiSep1 41252ac341928e8d9855eefa37a40800
  stringLiteral 90b2f163ad6560da32815c0d63082e94
  symbol be02f24ef3ce8a9506eb94033a675ebd
  whiteSpace 53320484bb65cdf95eb40903645a5232
import  -/  TigerSymbol 4628943ae21548f9838cca1c81589f49
  exports: 3aa8690c7d65c85b2775cbd880ffcd19
  Symbol 80a54d65275119c925e5daf83dc9ca3b
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  parsec-3.1.13.0:Text.Parsec 8698ecc486e7a2a7bdc9500cd29ef6f2
import  -/  parsec-3.1.13.0:Text.Parsec.Char ba652f10f2db2d657f224e91ed53fce9
import  -/  parsec-3.1.13.0:Text.Parsec.Combinator 867c44e0e488ef24ec5bd4da95f91de9
import  -/  parsec-3.1.13.0:Text.Parsec.Error 5c35aa426bd1cd52bcab90d9a1e3ce4c
import  -/  parsec-3.1.13.0:Text.Parsec.Expr 1a53c32ad29c608a30ef4c4ea3004f9a
import  -/  parsec-3.1.13.0:Text.Parsec.Pos 85d30a347a2120f1b5f286869826a471
import  -/  parsec-3.1.13.0:Text.Parsec.Prim 48929b84b5d30b299edcfed21f9bf40e
import  -/  parsec-3.1.13.0:Text.Parsec.String 2197da5d25a401744ce266b9d6355c6b
import  -/  parsec-3.1.13.0:Text.Parsec.Token 5ff1253a33e9911f5f6e7391fc9dc21b
import  -/  text-1.2.3.0:Data.Text 4f359e32d6f1c9011b171e00ff8fb023
0091d5ab40784090cb704ea92cce1b58
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  Data.Functor.Identity.$fMonadIdentity
                  (TigerParser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
da13741ba6bf3c226a3cbc8b80d184ff
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> (GHC.Base.Nothing @ (tok, [tok]))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R))
                   : t ts
                   -> (GHC.Base.Just @ (tok, [tok]) (t, ts))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R)) }) -}
f4d71cf828be9d2b29fdef013b268050
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerParser.$trModule3
                   TigerParser.$trModule1) -}
f1edd02f9b58e14d1fe4bff09f4a7142
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerParser.$trModule2) -}
66c7a67bd5d45e00e7ea6dcaa15aaa9d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TigerParser"#) -}
cfb2603e66a58c9ea23aea7f32eb09f7
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TigerParser.$trModule4) -}
fa22ee05623a45d3bd4da72dda24ff11
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HaskTiger-0.1.0.0-E2V2C9MNTGC8IfNMs3zKtJ"#) -}
02648d5d21d83e40ce401cceda06cf3e
  $wamperCmp ::
    TigerAbs.Pos
    -> (# Text.Parsec.Prim.ParsecT
            GHC.Base.String
            ()
            Data.Functor.Identity.Identity
            (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp),
          Text.Parsec.Expr.Assoc #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: TigerAbs.Pos) ->
                 let {
                   lvl64 :: TigerAbs.Exp = TigerAbs.IntExp TigerParser.amperCmp4 w
                 } in
                 let {
                   lvl65 :: GHC.Base.Maybe TigerAbs.Exp
                   = GHC.Base.Just @ TigerAbs.Exp lvl64
                 } in
                 (# (Text.Parsec.Prim.$fApplicativeParsecT2
                       @ [GHC.Types.Char]
                       @ ()
                       @ Data.Functor.Identity.Identity
                       @ ()
                       @ (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                       TigerParser.amperCmp1
                       (let {
                          x :: TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp
                            {- Arity: 2, Strictness: <L,U><L,U>,
                               Unfolding: InlineRule (2, True, False)
                                          (\ (e1 :: TigerAbs.Exp) (e2 :: TigerAbs.Exp) ->
                                           TigerAbs.IfExp e1 e2 lvl65 w) -}
                          = \ (e1 :: TigerAbs.Exp) (e2 :: TigerAbs.Exp) ->
                            TigerAbs.IfExp e1 e2 lvl65 w
                        } in
                        (\ @ b
                           (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                           (ds :: (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                                  -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                  -> Text.Parsec.Error.ParseError
                                  -> Data.Functor.Identity.Identity b)
                           (ds1 :: Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b)
                           (eok :: (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                                   -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                   -> Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b)
                           (ds2 :: Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b) ->
                         eok
                           x
                           s1
                           (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                            Text.Parsec.Error.ParseError
                              ds4
                              (GHC.Types.[] @ Text.Parsec.Error.Message) }))
                          `cast`
                        (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                  <[GHC.Types.Char]>_R
                                  <()>_R
                                  <Data.Functor.Identity.Identity>_R
                                  <TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp>_R))))
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp>_R)),
                    Text.Parsec.Expr.AssocLeft #)) -}
7296c154d287d2b9401c5fd59a7e66f8
  $wbinary ::
    GHC.Base.String
    -> TigerAbs.Oper
    -> Text.Parsec.Expr.Assoc
    -> TigerAbs.Pos
    -> (# Text.Parsec.Prim.ParsecT
            GHC.Base.String
            ()
            Data.Functor.Identity.Identity
            (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp),
          Text.Parsec.Expr.Assoc #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: TigerAbs.Oper)
                   (w2 :: Text.Parsec.Expr.Assoc)
                   (w3 :: TigerAbs.Pos) ->
                 (# (Text.Parsec.Prim.$fApplicativeParsecT2
                       @ [GHC.Types.Char]
                       @ ()
                       @ Data.Functor.Identity.Identity
                       @ ()
                       @ (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                       (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                        ds4 w })
                       (let {
                          x :: TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp
                            {- Arity: 2, Strictness: <L,U><L,U>,
                               Unfolding: InlineRule (2, True, False)
                                          (\ (e1 :: TigerAbs.Exp) (e2 :: TigerAbs.Exp) ->
                                           TigerAbs.OpExp e1 w1 e2 w3) -}
                          = \ (e1 :: TigerAbs.Exp) (e2 :: TigerAbs.Exp) ->
                            TigerAbs.OpExp e1 w1 e2 w3
                        } in
                        (\ @ b
                           (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                           (ds :: (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                                  -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                  -> Text.Parsec.Error.ParseError
                                  -> Data.Functor.Identity.Identity b)
                           (ds1 :: Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b)
                           (eok :: (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                                   -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                   -> Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b)
                           (ds2 :: Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b) ->
                         eok
                           x
                           s1
                           (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                            Text.Parsec.Error.ParseError
                              ds4
                              (GHC.Types.[] @ Text.Parsec.Error.Message) }))
                          `cast`
                        (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                  <[GHC.Types.Char]>_R
                                  <()>_R
                                  <Data.Functor.Identity.Identity>_R
                                  <TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp>_R))))
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp>_R)),
                    w2 #)) -}
b717cea7e5d23b35719ddf357bdb176e
  $wftype ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.Maybe Data.Text.Internal.Text
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.Maybe Data.Text.Internal.Text
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 4,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Base.Maybe Data.Text.Internal.Text
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Base.Maybe Data.Text.Internal.Text
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 TigerParser.ftype2
                   @ b
                   w
                   w1
                   w2
                   w3
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    w3
                      (GHC.Base.Nothing @ Data.Text.Internal.Text)
                      w
                      (case w of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))) -}
68c8f0f255f74557408c3ce0bd01b8bd
  $wgline ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Pos
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 2,
     Strictness: <L,U(U,U(U,U,U),U)><C(C(C(S))),1*C1(C1(C1(U)))>,
     Inline: [0],
     Unfolding: (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: TigerAbs.Pos
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 let {
                   x :: Text.Parsec.Pos.SourcePos
                   = case w of wild { Text.Parsec.Prim.State ds ds1 ds2 -> ds1 }
                 } in
                 w1
                   (TigerAbs.Simple
                      (case x of wild { Text.Parsec.Pos.SourcePos _name dt dt1 ->
                       GHC.Types.I# dt })
                      (case x of wild { Text.Parsec.Pos.SourcePos _name dt dt1 ->
                       GHC.Types.I# dt1 }))
                   w
                   (case w of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                    case ds4 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                    case GHC.Classes.$fOrd[]_$s$ccompare1 ww4 ww4 of wild1 {
                      DEFAULT
                      -> Text.Parsec.Error.ParseError
                           ww3
                           (GHC.Types.[] @ Text.Parsec.Error.Message)
                      GHC.Types.EQ
                      -> case Text.Parsec.Error.$wmergeError
                                ww4
                                ww5
                                ww6
                                Text.Parsec.Prim.$fMonadReaderrParsecT2
                                ww4
                                ww5
                                ww6
                                (GHC.Types.[]
                                   @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                         Text.Parsec.Error.ParseError ww15 ww16 } } } })) -}
86ab44aea18d15110a1cc7a30cf737c7
  $wmTypo ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.Maybe TigerSymbol.Symbol
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.Maybe TigerSymbol.Symbol
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 4,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Base.Maybe TigerSymbol.Symbol
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Base.Maybe TigerSymbol.Symbol
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ (GHC.Base.Maybe TigerSymbol.Symbol)
                   TigerLexer.colon
                   TigerParser.ftype1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.Maybe Data.Text.Internal.Text>_R))
                   @ b
                   w
                   w1
                   w2
                   w3
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    w3
                      (GHC.Base.Nothing @ TigerSymbol.Symbol)
                      w
                      (case w of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))) -}
18b87b3ee768956c6e354b1a9d6d97ee
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
45b275159aa59dff3367446053f62d5a
  $wouter1 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
53038124a6df12d1a79b2fe92b4d1d89
  $wouter2 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
810616b48ee331c0e3ea96446711affb
  $wparseFromStr ::
    GHC.Base.Monad m =>
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> m TigerAbs.Exp
  {- Arity: 5,
     Strictness: <S,1*U(A,A,A,1*C1(U),1*C1(U))><L,U><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0] -}
ab113d2bcff317a9ffbcd31f6c2f4daa
  $wparseexp ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 4,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: TigerAbs.Exp
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: TigerAbs.Exp
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   w
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    case TigerParser.$wtable x of ww { (#,#) ww1 ww2 ->
                    let {
                      eerr :: Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b1
                        {- Arity: 1, Strictness: <L,1*U(U(U,U,U),U)>,
                           Unfolding: InlineRule (1, True, False)
                                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                                       w3 (Text.Parsec.Error.mergeError err err')) -}
                      = \ (err' :: Text.Parsec.Error.ParseError) ->
                        w3 (Text.Parsec.Error.mergeError err err')
                    } in
                    (Text.Parsec.Expr.buildExpressionParser1
                       @ TigerAbs.Exp
                       @ GHC.Base.String
                       @ ()
                       @ Data.Functor.Identity.Identity
                       (GHC.Types.:
                          @ [Text.Parsec.Expr.Operator
                               GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp]
                          ww1
                          ww2)
                       TigerParser.expression3
                         `cast`
                       (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                 <GHC.Base.String>_R
                                 <()>_R
                                 <Data.Functor.Identity.Identity>_R
                                 <TigerAbs.Exp>_R)))
                      `cast`
                    (Text.Parsec.Prim.N:ParsecT[0]
                         <GHC.Base.String>_R
                         <()>_R
                         <Data.Functor.Identity.Identity>_R
                         <TigerAbs.Exp>_R)
                      @ b1
                      s2
                      w1
                      eerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                         (err' :: Text.Parsec.Error.ParseError) ->
                       w2 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      eerr })) -}
0ccad582fb597160c672c32e4f1e8e78
  $wpipeCmp ::
    TigerAbs.Pos
    -> (# Text.Parsec.Prim.ParsecT
            GHC.Base.String
            ()
            Data.Functor.Identity.Identity
            (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp),
          Text.Parsec.Expr.Assoc #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: TigerAbs.Pos) ->
                 let {
                   lvl64 :: TigerAbs.Exp = TigerAbs.IntExp TigerParser.pipeCmp4 w
                 } in
                 (# (Text.Parsec.Prim.$fApplicativeParsecT2
                       @ [GHC.Types.Char]
                       @ ()
                       @ Data.Functor.Identity.Identity
                       @ ()
                       @ (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                       TigerParser.pipeCmp1
                       (let {
                          x :: TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp
                            {- Arity: 2, Strictness: <L,U><L,U>,
                               Unfolding: InlineRule (2, True, False)
                                          (\ (e1 :: TigerAbs.Exp) (e2 :: TigerAbs.Exp) ->
                                           TigerAbs.IfExp
                                             e1
                                             lvl64
                                             (GHC.Base.Just @ TigerAbs.Exp e2)
                                             w) -}
                          = \ (e1 :: TigerAbs.Exp) (e2 :: TigerAbs.Exp) ->
                            TigerAbs.IfExp e1 lvl64 (GHC.Base.Just @ TigerAbs.Exp e2) w
                        } in
                        (\ @ b
                           (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                           (ds :: (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                                  -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                  -> Text.Parsec.Error.ParseError
                                  -> Data.Functor.Identity.Identity b)
                           (ds1 :: Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b)
                           (eok :: (TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp)
                                   -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                                   -> Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b)
                           (ds2 :: Text.Parsec.Error.ParseError
                                   -> Data.Functor.Identity.Identity b) ->
                         eok
                           x
                           s1
                           (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                            Text.Parsec.Error.ParseError
                              ds4
                              (GHC.Types.[] @ Text.Parsec.Error.Message) }))
                          `cast`
                        (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                  <[GHC.Types.Char]>_R
                                  <()>_R
                                  <Data.Functor.Identity.Identity>_R
                                  <TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp>_R))))
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Exp>_R)),
                    Text.Parsec.Expr.AssocLeft #)) -}
28aead92fb6e005f5292f18faee1366a
  $wtable ::
    TigerAbs.Pos
    -> (# [Text.Parsec.Expr.Operator
             GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp],
          [[Text.Parsec.Expr.Operator
              GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp]] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
954c1caab5cb539eaf4f1406d2907bf2
  $wv' ::
    TigerAbs.Var
    -> forall b.
       Text.Parsec.Prim.State GHC.Base.String ()
       -> (TigerAbs.Var
           -> Text.Parsec.Prim.State GHC.Base.String ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Var
           -> Text.Parsec.Prim.State GHC.Base.String ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))>,
     Inline: [0] -}
f2b2c0549808b96c69f7156bc4c12147
  amperCmp ::
    TigerAbs.Pos
    -> Text.Parsec.Expr.Operator
         GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp
  {- Arity: 1, Strictness: <L,U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TigerAbs.Pos) ->
                 case TigerParser.$wamperCmp w of ww { (#,#) ww1 ww2 ->
                 Text.Parsec.Expr.Infix
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ TigerAbs.Exp
                   ww1
                   ww2 }) -}
90c4dd4a67044b415b1b911b56bc0792
  amperCmp1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds4 TigerParser.amperCmp2 }) -}
ec70500e5e5c871cc5a77c269b651a59
  amperCmp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.amperCmp3) -}
6ff5a9a27a7564662ef07728ed474a21
  amperCmp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("&"#) -}
baf0bd725c6a9ddbb26fbb4b3f3fc3b8
  amperCmp4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
9e45b9f53db8fbf2d8ed7b529c43045f
  arrayexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.arrayexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
a3d56990910e166f2dd3251c23a14d8c
  arrayexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.arrayexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
e4676ab0eb965892e1d9ba6bc69ff2b1
  arrayexp2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
c2dfe1bec7fce8665bbd27b1e96087fc
  arrty :: Text.Parsec.String.Parser TigerAbs.Ty
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                TigerParser.arrty1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Ty>_R)) -}
171a75d7e5b2a92147f3b664e0e4df62
  arrty1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ TigerAbs.Ty
                   TigerParser.arrty3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   TigerParser.arrty2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <TigerAbs.Ty>_R))) -}
3f59f418e3b96f9011ec372d5efc806a
  arrty2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Ty
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Ty
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String) ->
                    cok
                      (TigerAbs.ArrayTy
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s2 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 })))
                   cerr
                   (\ (x :: GHC.Base.String) ->
                    eok
                      (TigerAbs.ArrayTy
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s2 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 })))
                   eerr }) -}
3d0e396b75b86e1671e02cc09148e1b7
  arrty3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (()
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (()
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ ()
                   TigerParser.arrty7
                   TigerParser.arrty4) -}
31fd174452d76577052291fad92db47c
  arrty4 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds2 TigerParser.arrty5 }) -}
ccb3276632e0d9d46d1d1d2d60d5a063
  arrty5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.arrty6) -}
efef7f8d2c450751f48c42ce72e1233f
  arrty6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("of"#) -}
6dee00c7ea1de1e9c22b10687012c998
  arrty7 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds2 TigerParser.arrty8 }) -}
bda67724bf285a7e79c3869b3d054125
  arrty8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.arrty9) -}
aa17959c99d21761c71ee28af4ef4fb9
  arrty9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("array"#) -}
4967063c2532ba2a86eeff5dbe2d4658
  assignexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.assignexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
ac4ffd0bde651b8aca81c35b3bf6ebc0
  assignexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.assignexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
4f4cf6fda4c4ec46e9d7476c1c968fd6
  assignexp2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
4ac03bcfc96f503199d4f303fadde59e
  binary ::
    GHC.Base.String
    -> TigerAbs.Oper
    -> Text.Parsec.Expr.Assoc
    -> TigerAbs.Pos
    -> Text.Parsec.Expr.Operator
         GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m1, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: TigerAbs.Oper)
                   (w2 :: Text.Parsec.Expr.Assoc)
                   (w3 :: TigerAbs.Pos) ->
                 case TigerParser.$wbinary w w1 w2 w3 of ww { (#,#) ww1 ww2 ->
                 Text.Parsec.Expr.Infix
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ TigerAbs.Exp
                   ww1
                   ww2 }) -}
89da8cc391ad73a55aa89c896e113de6
  breakexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.breakexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
8c099adb2be128ceea57331f4cb0b209
  breakexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.breakexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
c64ad60c718bb28ec30f5aaec7f1bcea
  breakexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (p :: TigerAbs.Pos)
                   @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ TigerAbs.Exp
                   TigerParser.breakexp3
                   (let {
                      x :: TigerAbs.Exp = TigerAbs.BreakExp p
                    } in
                    (\ @ b
                       (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                       (ds :: TigerAbs.Exp
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b)[OneShot]
                       (ds1 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot]
                       (eok :: TigerAbs.Exp
                               -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                               -> Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot]
                       (ds2 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot] ->
                     eok
                       x
                       s1
                       (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                        Text.Parsec.Error.ParseError
                          ds4
                          (GHC.Types.[] @ Text.Parsec.Error.Message) }))
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <TigerAbs.Exp>_R)))
                   @ b1
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
d88d3770e8374b841d8bc20b34768234
  breakexp3 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds2 TigerParser.breakexp4 }) -}
3faf558186c16a246ec89f5d322b4b1a
  breakexp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.breakexp5) -}
338519d01be36f9ca527513b85fc637f
  breakexp5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("break"#) -}
ff2c952430c3a06a8c238c8fe7d6a1c9
  callexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.callexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
e1a3ef4f3703fec86cdcaca7e5fea2a3
  callexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.callexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
f8bc4fd2d8075d85ad6ce1eea4647821
  callexp2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
df3a5da48eb4b7e4875d4473a3753e0e
  declarations :: Text.Parsec.String.Parser TigerAbs.Dec
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.declarations1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Dec>_R)) -}
77226a2ee2776607ffe8f76abcf13a6b
  declarations1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)> -}
1d7aef21fcc8c2263a5f753772209527
  expression :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                TigerParser.expression1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
21fb614b8d3c48020bc40d416fa3bd4a
  expression' :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.expression3
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
fa4059ecf28bba77d1019648c50a4bfe
  expression1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ TigerAbs.Exp
                   TigerLexer.whiteSpace
                   TigerParser.expression2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <TigerAbs.Exp>_R))) -}
15bb6d57eda87b1d403eac3ebced12f6
  expression2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,A><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: TigerAbs.Exp
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: TigerAbs.Exp
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wparseexp @ b1 w w1 w3 w4) -}
ceeb8a3bf439d5dd9991ab9b311d1864
  expression3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)> -}
23d583a49a4521d92734bd1588f52d4a
  field ::
    Text.Parsec.String.Parser
      [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)]
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds27
                   @ (Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty)
                   (\ @ b1
                      (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (cok :: (Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty)
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b1)
                      (cerr :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b1)
                      (eok :: (Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty)
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b1)
                      (eerr :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b1) ->
                    ds
                      `cast`
                    (Text.Parsec.Prim.N:ParsecT[0]
                         <[GHC.Types.Char]>_R
                         <()>_R
                         <Data.Functor.Identity.Identity>_R
                         <GHC.Base.String>_R)
                      @ b1
                      s1
                      (\ (x :: GHC.Base.String)
                         (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                         (err :: Text.Parsec.Error.ParseError) ->
                       TigerParser.field1
                         x
                         @ b1
                         s2
                         cok
                         cerr
                         (\ (x1 :: (Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty))
                            (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                            (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                          cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                         (\ (err' :: Text.Parsec.Error.ParseError) ->
                          cerr (Text.Parsec.Error.mergeError err err')))
                      cerr
                      (\ (x :: GHC.Base.String)
                         (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                         (err :: Text.Parsec.Error.ParseError) ->
                       TigerParser.field1
                         x
                         @ b1
                         s2
                         cok
                         cerr
                         (\ (x1 :: (Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty))
                            (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                            (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                          eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                         (\ (err' :: Text.Parsec.Error.ParseError) ->
                          eerr (Text.Parsec.Error.mergeError err err')))
                      eerr)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty)>_R)) }) -}
eaa966239df8436d689e9186b6a9a9c3
  field' ::
    Text.Parsec.String.Parser [(TigerSymbol.Symbol, TigerAbs.Ty)]
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds27
                   @ (Data.Text.Internal.Text, TigerAbs.Ty)
                   (\ @ b1
                      (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (cok :: (Data.Text.Internal.Text, TigerAbs.Ty)
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b1)
                      (cerr :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b1)
                      (eok :: (Data.Text.Internal.Text, TigerAbs.Ty)
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b1)
                      (eerr :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b1) ->
                    ds
                      `cast`
                    (Text.Parsec.Prim.N:ParsecT[0]
                         <[GHC.Types.Char]>_R
                         <()>_R
                         <Data.Functor.Identity.Identity>_R
                         <GHC.Base.String>_R)
                      @ b1
                      s1
                      (\ (x :: GHC.Base.String)
                         (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                         (err :: Text.Parsec.Error.ParseError) ->
                       TigerParser.field'1
                         x
                         @ b1
                         s2
                         cok
                         cerr
                         (\ (x1 :: (Data.Text.Internal.Text, TigerAbs.Ty))
                            (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                            (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                          cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                         (\ (err' :: Text.Parsec.Error.ParseError) ->
                          cerr (Text.Parsec.Error.mergeError err err')))
                      cerr
                      (\ (x :: GHC.Base.String)
                         (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                         (err :: Text.Parsec.Error.ParseError) ->
                       TigerParser.field'1
                         x
                         @ b1
                         s2
                         cok
                         cerr
                         (\ (x1 :: (Data.Text.Internal.Text, TigerAbs.Ty))
                            (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                            (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                          eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                         (\ (err' :: Text.Parsec.Error.ParseError) ->
                          eerr (Text.Parsec.Error.mergeError err err')))
                      eerr)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(Data.Text.Internal.Text, TigerAbs.Ty)>_R)) }) -}
2afa15725eb3a3ee974d49ac7d53eae8
  field'1 ::
    GHC.Base.String
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> ((Data.Text.Internal.Text, TigerAbs.Ty)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> ((Data.Text.Internal.Text, TigerAbs.Ty)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,1*U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
a72e417251b413c8c404429f2dde2230
  field1 ::
    GHC.Base.String
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> ((Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> ((Data.Text.Internal.Text, TigerAbs.Escapa, TigerAbs.Ty)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,1*U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
57e959eea6d25a4f39c89bdb04d266b7
  forexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.forexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
722e0bb0596f40d1eedd9fb7d863b427
  forexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.forexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
ed472e04474091d903cf01909f9a9d0d
  forexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
2e3eac8f2e4dd50e7b889319cd4ad678
  ftype ::
    Text.Parsec.String.Parser (GHC.Base.Maybe TigerSymbol.Symbol)
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.ftype1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Base.Maybe Data.Text.Internal.Text>_R)) -}
1012f0b868cba463f78d65cff98d1a63
  ftype1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.Maybe Data.Text.Internal.Text
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.Maybe Data.Text.Internal.Text
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Base.Maybe Data.Text.Internal.Text
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Base.Maybe Data.Text.Internal.Text
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 TigerParser.$wftype @ b w w1 w2 w3) -}
5fa871c84944808cee8e64001d00c52f
  ftype2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Base.Maybe Data.Text.Internal.Text
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Base.Maybe Data.Text.Internal.Text
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: GHC.Base.Maybe Data.Text.Internal.Text
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: GHC.Base.Maybe Data.Text.Internal.Text
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    cok
                      (GHC.Base.Just
                         @ Data.Text.Internal.Text
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s4 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 }))
                      s2
                      (case s2 of wild1 { Text.Parsec.Prim.State ds37 ds38 ds39 ->
                       case ds38 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   cerr
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eok
                      (GHC.Base.Just
                         @ Data.Text.Internal.Text
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s4 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 }))
                      s2
                      (case s2 of wild1 { Text.Parsec.Prim.State ds37 ds38 ds39 ->
                       case ds38 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eerr }) -}
74f5e95db9fe995725b611bdf6002766
  functiondec :: Text.Parsec.String.Parser TigerAbs.Dec
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.functiondec1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Dec>_R)) -}
9e64a34f2257281076539ff8638c1f84
  functiondec1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Dec
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Dec
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ (TigerSymbol.Symbol,
                      [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
                      GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)
                   TigerParser.functiondec2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(TigerSymbol.Symbol,
                               [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
                               GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)>_R))
                   @ b1
                   s1
                   (\ (x :: [(TigerSymbol.Symbol,
                              [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
                              GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)]) ->
                    cok (TigerAbs.FunctionDec x))
                   cerr
                   (\ (x :: [(TigerSymbol.Symbol,
                              [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
                              GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)]) ->
                    eok (TigerAbs.FunctionDec x))
                   eerr) -}
50f01df5896946ad639658ead41376cf
  functiondec2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((TigerSymbol.Symbol,
         [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
         GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((TigerSymbol.Symbol,
         [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
         GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)> -}
04435db2dc2f5288bd74beb7dee2f49e
  fundec ::
    Text.Parsec.String.Parser
      (TigerSymbol.Symbol,
       [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
       GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.functiondec2
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <(TigerSymbol.Symbol,
                            [(TigerSymbol.Symbol, TigerAbs.Escapa, TigerAbs.Ty)],
                            GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp,
                            TigerAbs.Pos)>_R)) -}
f3723f4e2e7866fa15849016a89b659d
  gline :: Text.Parsec.String.Parser TigerAbs.Pos
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,A><L,A><C(C(C(S))),1*C1(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.gline1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Pos>_R)) -}
1d7076b6a2bb89186f69d074fb5a4527
  gline1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Pos
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Pos
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,A><L,A><C(C(C(S))),1*C1(C1(C1(U)))><L,A>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: TigerAbs.Pos
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: TigerAbs.Pos
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline @ b1 w w3) -}
019f53d1b5b643d148affa406c79f821
  ifexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.ifexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
a794f75b98c6c0f08e0ffc8057419313
  ifexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.ifexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
909f76dbf90f3b7ab9ec20b2d65326c0
  ifexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
949f8917fb83031161210c77eae01be4
  int :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.int1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
336b3c7d02a70c4156af66883a044f19
  int1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.int2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
daeb43ceb7682ee158cae98e93b75854
  int2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (pos :: TigerAbs.Pos)
                   @ b
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 TigerLexer.number1
                   @ b
                   eta
                   (\ (x :: GHC.Types.Int)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    eta1
                      (TigerAbs.IntExp x pos)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ (x :: GHC.Types.Int)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    eta3
                      (TigerAbs.IntExp x pos)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
0ce6a4af7e83ce57e4b950bae91a71c6
  letexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.letexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
6e9d10abeda620ed16a1aeb7bea36e04
  letexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)> -}
3e70eae79e950f56d4220bbccbb0eb76
  mTypo ::
    Text.Parsec.String.Parser (GHC.Base.Maybe TigerSymbol.Symbol)
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.mTypo1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Base.Maybe TigerSymbol.Symbol>_R)) -}
53b373d232a2b7ed7ba7c8d49830e00c
  mTypo1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.Maybe TigerSymbol.Symbol
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.Maybe TigerSymbol.Symbol
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,A>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Base.Maybe TigerSymbol.Symbol
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Base.Maybe TigerSymbol.Symbol
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 TigerParser.$wmTypo @ b w w1 w2 w3) -}
6fdbb93427cfc9a84a2191ee1715ddad
  namety :: Text.Parsec.String.Parser TigerAbs.Ty
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.namety1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Ty>_R)) -}
978fde38508610f889378a13cc96e142
  namety1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Ty
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Ty
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String) ->
                    cok
                      (TigerAbs.NameTy
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s2 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 })))
                   cerr
                   (\ (x :: GHC.Base.String) ->
                    eok
                      (TigerAbs.NameTy
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s2 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 })))
                   eerr }) -}
87aa6ba7eced9ce124f2f1eb8b88122c
  nilexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.nilexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
ae57205ded97c6b1b37b437b10d65426
  nilexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.nilexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
c4e884addd52bf3ad70fff292566cb36
  nilexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (p :: TigerAbs.Pos)
                   @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ TigerAbs.Exp
                   TigerParser.nilexp3
                   (let {
                      x :: TigerAbs.Exp = TigerAbs.NilExp p
                    } in
                    (\ @ b
                       (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                       (ds :: TigerAbs.Exp
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b)[OneShot]
                       (ds1 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot]
                       (eok :: TigerAbs.Exp
                               -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                               -> Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot]
                       (ds2 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot] ->
                     eok
                       x
                       s1
                       (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                        Text.Parsec.Error.ParseError
                          ds4
                          (GHC.Types.[] @ Text.Parsec.Error.Message) }))
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <TigerAbs.Exp>_R)))
                   @ b1
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
db438fec0e85f001a2ea72e0cf90b781
  nilexp3 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds2 TigerParser.nilexp4 }) -}
1ddd43b64d82ea5e2871210ba31e4a2d
  nilexp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.nilexp5) -}
d91895245f24425a84917fec2cd544f5
  nilexp5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("nil"#) -}
6b77e3cfc58009ec083cbe40b214d1e1
  parse ::
    GHC.Base.String
    -> Data.Either.Either Text.Parsec.Error.ParseError TigerAbs.Exp
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.parse1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Data.Either.Either
                             Text.Parsec.Error.ParseError TigerAbs.Exp>_R) -}
0f86ffffb1c978d32d1f7b15b27e6833
  parse1 ::
    GHC.Base.String
    -> Data.Functor.Identity.Identity
         (Data.Either.Either Text.Parsec.Error.ParseError TigerAbs.Exp)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: GHC.Base.String) ->
                 Text.Parsec.Prim.runPT
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ TigerAbs.Exp
                   (TigerParser.$s$fStream[]mtok @ GHC.Types.Char)
                   TigerParser.expression1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <TigerAbs.Exp>_R))
                   GHC.Tuple.()
                   p
                   p) -}
34f911897e6ab8fe20eb6021b392db36
  parseFromFile ::
    GHC.IO.FilePath
    -> GHC.Types.IO
         (Data.Either.Either Text.Parsec.Error.ParseError TigerAbs.Exp)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.parseFromFile1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Text.Parsec.Error.ParseError TigerAbs.Exp>_R)) -}
eb7a038f92bca601880e4780f094e5bb
  parseFromFile1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either Text.Parsec.Error.ParseError TigerAbs.Exp #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (p :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        p
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (Text.Parsec.Prim.runPT
                       @ GHC.Base.String
                       @ Data.Functor.Identity.Identity
                       @ GHC.Types.Char
                       @ ()
                       @ TigerAbs.Exp
                       (TigerParser.$s$fStream[]mtok @ GHC.Types.Char)
                       TigerParser.expression1
                         `cast`
                       (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                 <[GHC.Types.Char]>_R
                                 <()>_R
                                 <Data.Functor.Identity.Identity>_R
                                 <TigerAbs.Exp>_R))
                       GHC.Tuple.()
                       p
                       ipv3)
                      `cast`
                    (Data.Functor.Identity.N:Identity[0]
                         <Data.Either.Either
                            Text.Parsec.Error.ParseError TigerAbs.Exp>_R) #) } }) -}
141dea13d0ffb43889c5875bdebd7135
  parseFromStr ::
    GHC.Base.Monad m =>
    (GHC.Base.String, GHC.Types.Int, GHC.Types.Int)
    -> GHC.Base.String -> m TigerAbs.Exp
  {- Arity: 3,
     Strictness: <S,1*U(A,A,A,1*C1(U),1*C1(U))><S,1*U(U,1*U(U),1*U(U))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: (GHC.Base.String, GHC.Types.Int, GHC.Types.Int))
                   (w2 :: GHC.Base.String) ->
                 case w1 of ww { (,,) ww1 ww2 ww3 ->
                 TigerParser.$wparseFromStr @ m w ww1 ww2 ww3 w2 }) -}
bec06615dfa55da949867a13e7597c4a
  parseexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,A><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.expression2
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
058850138b9a1bbe0587a291d563a92a
  pipeCmp ::
    TigerAbs.Pos
    -> Text.Parsec.Expr.Operator
         GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp
  {- Arity: 1, Strictness: <L,U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TigerAbs.Pos) ->
                 case TigerParser.$wpipeCmp w of ww { (#,#) ww1 ww2 ->
                 Text.Parsec.Expr.Infix
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ TigerAbs.Exp
                   ww1
                   ww2 }) -}
74f66ab2ccba707327270ad5bf2d3788
  pipeCmp1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds4 TigerParser.pipeCmp2 }) -}
7026aa4a6cbee87ce17a96423fd67520
  pipeCmp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.pipeCmp3) -}
4de4fd2ae4f188cee12535689c041b4b
  pipeCmp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("|"#) -}
cd2aec0e343a412b801d5edb1628bf75
  pipeCmp4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
8e86073f818e1f34c9a96a3e8484be28
  recfld ::
    Text.Parsec.String.Parser (TigerSymbol.Symbol, TigerAbs.Exp)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.recfld1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <(TigerSymbol.Symbol, TigerAbs.Exp)>_R)) -}
d7fb356574a415840d11b2314df0ed59
  recfld1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((TigerSymbol.Symbol, TigerAbs.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((TigerSymbol.Symbol, TigerAbs.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: (TigerSymbol.Symbol, TigerAbs.Exp)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: (TigerSymbol.Symbol, TigerAbs.Exp)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    TigerParser.recfld2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: (TigerSymbol.Symbol, TigerAbs.Exp))
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    TigerParser.recfld2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: (TigerSymbol.Symbol, TigerAbs.Exp))
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr }) -}
3e8ee21faa4c293bb55e3a524693048b
  recfld2 ::
    GHC.Base.String
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> ((TigerSymbol.Symbol, TigerAbs.Exp)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> ((TigerSymbol.Symbol, TigerAbs.Exp)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
9aaaadb93a01773d63abeced07d4326b
  recordexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.recordexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
f561776bbd2e2b649a62d21eb22123fc
  recordexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.recordexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
b2fa2726e762024227e46772065abcaa
  recordexp2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
aea98110276a3572e656f455d7d46a04
  rety :: Text.Parsec.String.Parser TigerAbs.Ty
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.rety1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Ty>_R)) -}
d6a4d3940823e3bac8a797d694a32ff4
  rety1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Ty
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Ty
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.rety_p
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <[(TigerSymbol.Symbol, TigerAbs.Ty)]>_R)
                   @ b1
                   s1
                   (\ (x :: [(TigerSymbol.Symbol, TigerAbs.Ty)]) ->
                    cok (TigerAbs.RecordTy x))
                   cerr
                   (\ (x :: [(TigerSymbol.Symbol, TigerAbs.Ty)]) ->
                    eok (TigerAbs.RecordTy x))
                   eerr) -}
a20e3ed57f5a4fceb07b39a80e205b6d
  rety_p ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char]
      ()
      Data.Functor.Identity.Identity
      [(TigerSymbol.Symbol, TigerAbs.Ty)]
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds17 @ [(TigerSymbol.Symbol, TigerAbs.Ty)] TigerParser.field' }) -}
e3a6ef0679f6f39f550ca7eefaedaee8
  seqexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.seqexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
bb630e37cf981960705c822303cf0c28
  seqexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.seqexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
14ba7454a407c6a572d8df558731dd95
  seqexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (p :: TigerAbs.Pos)
                   @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.seqexp_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <[TigerAbs.Exp]>_R)
                   @ b1
                   s1
                   (\ (x :: [TigerAbs.Exp])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    cok
                      (TigerAbs.SeqExp x p)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   cerr
                   (\ (x :: [TigerAbs.Exp])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eok
                      (TigerAbs.SeqExp x p)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eerr) -}
a3afddc54cb966de9534e78a3350e6f7
  seqexpWOut :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.seqexpWOut1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
cd30b3a0d033055e79a1a6fd3d6b60d3
  seqexpWOut1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
02c19bad87498c31aecaa2a490dde55f
  seqexp_m1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity [TigerAbs.Exp]
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds16
                   @ [TigerAbs.Exp]
                   (ds26
                      @ TigerAbs.Exp
                      TigerParser.expression1
                        `cast`
                      (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                <[GHC.Types.Char]>_R
                                <()>_R
                                <Data.Functor.Identity.Identity>_R
                                <TigerAbs.Exp>_R))) }) -}
588136b88bb0bec8460d9c6d5ea9a047
  stringexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.stringexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
c2f81dab6a17c425c077f43e7c0a33f0
  stringexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.stringexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
80c98f89b466c8eac665021b03f2d360
  stringexp2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (p :: TigerAbs.Pos)
                   @ b
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds6
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b
                   eta
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta1
                      (TigerAbs.StringExp x p)
                      s2
                      (case s2 of wild1 { Text.Parsec.Prim.State ds37 ds38 ds39 ->
                       case ds38 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta3
                      (TigerAbs.StringExp x p)
                      s2
                      (case s2 of wild1 { Text.Parsec.Prim.State ds37 ds38 ds39 ->
                       case ds38 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4 }) -}
0868c5382d8b75689736ea3da8de5fab
  table ::
    TigerAbs.Pos
    -> [[Text.Parsec.Expr.Operator
           GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp]]
  {- Arity: 1, Strictness: <L,U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TigerAbs.Pos) ->
                 case TigerParser.$wtable w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ [Text.Parsec.Expr.Operator
                        GHC.Base.String () Data.Functor.Identity.Identity TigerAbs.Exp]
                   ww1
                   ww2 }) -}
3ccebf175fb3d513f21fefda6845ffb8
  ty :: Text.Parsec.String.Parser TigerAbs.Ty
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.ty1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Ty>_R)) -}
0cb483e4b2c18eef97af020b51fe35b8
  ty1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (TigerAbs.Ty
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,C(U)> -}
10c1ecb67d67481eedb04bbf32b1d71d
  tydec ::
    Text.Parsec.String.Parser
      (TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.tydec1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)>_R)) -}
633526c68f375816e4dbfdf071bafa2e
  tydec1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)> -}
36a97f97a13b93c824de3510f0ed9e4c
  tydecs :: Text.Parsec.String.Parser TigerAbs.Dec
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.tydecs1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Dec>_R)) -}
8f1a403d7f4d0cd7e3dd229d037ac4fe
  tydecs1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Dec
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Dec
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ (TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)
                   TigerParser.tydec1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)>_R))
                   @ b1
                   s1
                   (\ (x :: [(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)]) ->
                    cok (TigerAbs.TypeDec x))
                   cerr
                   (\ (x :: [(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)]) ->
                    eok (TigerAbs.TypeDec x))
                   eerr) -}
556226db6c31e96aa2148866fdea173c
  unitexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.unitexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
26627be2f4c6d141e1056cf2a8bd6ce1
  unitexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.unitexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
d1e8cf64bd1ecabdabe0c46198ba1dcf
  unitexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (p :: TigerAbs.Pos)
                   @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ TigerAbs.Exp
                   TigerParser.unitexp3
                   (let {
                      x :: TigerAbs.Exp = TigerAbs.UnitExp p
                    } in
                    (\ @ b
                       (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                       (ds :: TigerAbs.Exp
                              -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                              -> Text.Parsec.Error.ParseError
                              -> Data.Functor.Identity.Identity b)[OneShot]
                       (ds1 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot]
                       (eok :: TigerAbs.Exp
                               -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                               -> Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot]
                       (ds2 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b)[OneShot] ->
                     eok
                       x
                       s1
                       (case s1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                        Text.Parsec.Error.ParseError
                          ds4
                          (GHC.Types.[] @ Text.Parsec.Error.Message) }))
                      `cast`
                    (Sym (Text.Parsec.Prim.N:ParsecT[0]
                              <[GHC.Types.Char]>_R
                              <()>_R
                              <Data.Functor.Identity.Identity>_R
                              <TigerAbs.Exp>_R)))
                   @ b1
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
eb32cbee119db2eb7b3a7b5a226ca15f
  unitexp3 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity ()
  {- Unfolding: (case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds2 TigerParser.unitexp4 }) -}
8d34b2de482a081e492d562c0af43d3f
  unitexp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# TigerParser.unitexp5) -}
ebe89b9098f71f96d31ad40415858f7f
  unitexp5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("()"#) -}
08096517c64e15e65b8d4d515e60cbb2
  v' :: TigerAbs.Var -> Text.Parsec.String.Parser TigerAbs.Var
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.v'1
                  `cast`
                (<TigerAbs.Var>_R
                 ->_R Sym (Text.Parsec.Prim.N:ParsecT[0]
                               <GHC.Base.String>_R
                               <()>_R
                               <Data.Functor.Identity.Identity>_R
                               <TigerAbs.Var>_R)) -}
940071e4dc4eaf209f918db8d322ac1b
  v'1 ::
    TigerAbs.Var
    -> forall b.
       Text.Parsec.Prim.State GHC.Base.String ()
       -> (TigerAbs.Var
           -> Text.Parsec.Prim.State GHC.Base.String ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Var
           -> Text.Parsec.Prim.State GHC.Base.String ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,A>,
     Inline: [0],
     Unfolding: InlineRule (6, True, True)
                (\ (w :: TigerAbs.Var)
                   @ b
                   (w1 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w2 :: TigerAbs.Var
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: TigerAbs.Var
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 TigerParser.$wv' w @ b w1 w2 w3 w4) -}
ede6970df30406f8e9c99cdaff0609bb
  vardec :: Text.Parsec.String.Parser TigerAbs.Dec
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.vardec1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Dec>_R)) -}
a41cdb142da22b4a677d3dd30c384a03
  vardec1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Dec
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Dec
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Dec
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.vardec2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Dec)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
3ea97cf3c35b0e3781051175e9824bf3
  vardec2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Dec
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Dec
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
1badac1fd21c737c2a89e7c182d28c6c
  varexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.varexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
d9f4b2e1e1f8d20f6521be7469219629
  varexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.varexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
3f12181553fd6a03bfb24774736707e5
  varexp2 ::
    TigerAbs.Pos
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (p :: TigerAbs.Pos)
                   @ b
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: TigerAbs.Exp
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 TigerParser.varexp3
                   @ b
                   eta
                   (\ (x :: TigerAbs.Var)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta1
                      (TigerAbs.VarExp x p)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ (x :: TigerAbs.Var)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    eta3
                      (TigerAbs.VarExp x p)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
8b33138235d89600e5be62f170e31170
  varexp3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Var
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Var
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Var
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Var
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case TigerLexer.lexer of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    TigerParser.$wv'
                      (TigerAbs.SimpleVar
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s4 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter2
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 }))
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Var)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    TigerParser.$wv'
                      (TigerAbs.SimpleVar
                         (case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                                 (\ (s4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s4 of ds37 { (#,#) ipv ipv1 ->
                                  TigerParser.$wouter1
                                    ipv1
                                    4#
                                    x
                                    0#
                                    ipv }) of ds37 { (#,#) ipv ipv1 ->
                          ipv1 }))
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Var)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err')))
                   eerr }) -}
2bfbfd591329720c0d2762e8244ed208
  variable :: Text.Parsec.String.Parser TigerAbs.Var
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.varexp3
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Var>_R)) -}
b1f117503a4ad7763f848d2b4d3e72ab
  whileexp :: Text.Parsec.String.Parser TigerAbs.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                TigerParser.whileexp1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <TigerAbs.Exp>_R)) -}
bbd83b46ac24c0578d9901adae2bc435
  whileexp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (TigerAbs.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: TigerAbs.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 TigerParser.$wgline
                   @ b1
                   s1
                   (\ (x :: TigerAbs.Pos)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    TigerParser.whileexp2
                      x
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: TigerAbs.Exp)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))) -}
17c6eedf3680b6d20c7d1a6e29cf7fa0
  whileexp2 ::
    TigerAbs.Pos
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (TigerAbs.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U> -}
"SPEC/TigerParser $fStream[]mtok @ Identity _" [orphan] forall @ tok
                                                               (v :: GHC.Base.Monad
                                                                       Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  v
  = TigerParser.$s$fStream[]mtok @ tok
"SPEC/TigerParser $fStream[]mtok_$cuncons @ Identity _" [orphan] forall @ tok
                                                                        ($dMonad :: GHC.Base.Monad
                                                                                      Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = TigerParser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

