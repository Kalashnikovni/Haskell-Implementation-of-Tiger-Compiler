
==================== FINAL INTERFACE ====================
2019-06-15 23:21:48.152016435 UTC

interface main:Main 8043
  interface hash: 1fa4cf8cff0a6ebd87208537b10afcf8
  ABI hash: 9b23f5e078ba0d01388107cbfca1add4
  export-list hash: e8f55ded8e4efa7f2521599eb31bbac9
  orphan hash: 737594bf99f570ea775b0478a2221a79
  flag hash: 4707fb8759a956dd86c356c8a064b68c
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: Tools
package dependencies: HaskTiger-0.1.0.0 ansi-terminal-0.8.0.4
                      array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1 bytestring-0.10.8.2
                      colour-2.3.4 containers-0.5.11.0 deepseq-1.4.3.0 directory-1.3.1.5
                      filepath-1.4.2 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 mtl-2.2.2
                      parsec-3.1.13.0 syb-0.7 text-1.2.3.0 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2
orphans: syb-0.7:Data.Generics.Instances
         text-1.2.3.0:Data.Text.Lazy
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show colour-2.3.4:Data.Colour
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
import  -/  HaskTiger-0.1.0.0:TigerParser 08ee935ede5b6811b1d06e65a545d374
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Tools ceb198a2552119ca60174c749e3e116c
  exports: ce2886b4affc9469698c1f25ad3a0cef
  badRes 47a23af59adf99d0886daf1a7cd60e59
  bad_loc c4aeb34502105a7f1b7e616707826e18
  bluenice ecff1ef90182987d68c9238fa9682244
  good_loc 383de2ef1e1dbb6bc40ade065a74c2b7
  test b54f793be0a1e5441804fc0075391609
  testBad c1cafc42610078a6b573801c74b839e4
  testDir f782a0902898d71d1b0945297b19c0c8
  testGood 82d65aa70bc6bd0631577a02181633e3
  type_loc f87f36c960609303ec87fbea5d4c2ddf
import  -/  parsec-3.1.13.0:Text.Parsec 8698ecc486e7a2a7bdc9500cd29ef6f2
import  -/  parsec-3.1.13.0:Text.Parsec.Prim 48929b84b5d30b299edcfed21f9bf40e
adbd163e4b0cdf7c03d91872bb1c12fe
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  Data.Functor.Identity.$fMonadIdentity
                  (Main.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
f2b56295ebca264369e2c2a83ff3aa93
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> (GHC.Base.Nothing @ (tok, [tok]))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R))
                   : t ts
                   -> (GHC.Base.Just @ (tok, [tok]) (t, ts))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R)) }) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
ea045b24d9f9f1c56b69dcbcc18df170
  $w$j ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main_s
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.main17
                        GHC.IO.IOMode.ReadMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ TigerAbs.Exp
                         (Main.$s$fStream[]mtok @ GHC.Types.Char)
                         TigerParser.expression1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <TigerAbs.Exp>_R))
                         GHC.Tuple.()
                         ipv5
                         ipv5)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError TigerAbs.Exp>_R) of wild {
                   Data.Either.Left x
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main14
                             GHC.Types.True
                             ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                      case Tools.badRes1
                             (Text.Parsec.Error.$fShowParseError_$cshow x)
                             ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                      Main.$w$j1 ipv8 } }
                   Data.Either.Right y
                   -> case Tools.bluenice1 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                      Main.$w$j1 ipv6 } } } } }) -}
65307cf6f7a47603cc3e6c5f3c0ae6fa
  $w$j1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main12
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Tools.testDir1
                        Tools.good_loc
                        Main.main11
                          `cast`
                        (<GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main9
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Tools.testDir1
                        Tools.type_loc
                        Main.main8
                          `cast`
                        (<GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main6
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case Tools.testDir1
                        Tools.bad_loc
                        Main.main4
                          `cast`
                        (<GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv10 } } } } } }) -}
c6abc1c3c2faa164fff03538a9cc3fe4
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
5579316b738e1973f34703a65fb17e89
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main25
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main_s1
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.main23
                        GHC.IO.IOMode.ReadMode
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ TigerAbs.Exp
                         (Main.$s$fStream[]mtok @ GHC.Types.Char)
                         TigerParser.expression1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <TigerAbs.Exp>_R))
                         GHC.Tuple.()
                         ipv7
                         ipv7)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError TigerAbs.Exp>_R) of wild {
                   Data.Either.Left x
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main20
                             GHC.Types.True
                             ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                      case Tools.badRes1
                             (Text.Parsec.Error.$fShowParseError_$cshow x)
                             ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                      Main.$w$j ipv10 } }
                   Data.Either.Right y
                   -> case Tools.bluenice1 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                      Main.$w$j ipv8 } } } } } }) -}
e229a9e8ebfd111d0e7802f9c5187c6c
  main10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Type:"#) -}
dca89b1df5983d69c7ccc22678850087
  main11 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Unfolding: (Tools.testGood1
                   @ Text.Parsec.Error.ParseError
                   @ TigerAbs.Exp
                   Text.Parsec.Error.$fShowParseError
                   Tools.good_loc
                   Main.main5
                     `cast`
                   (<Text.Parsec.Pos.SourceName>_R
                    ->_R Data.Functor.Identity.N:Identity[0]
                             <Data.Either.Either
                                Text.Parsec.Error.ParseError TigerAbs.Exp>_R)) -}
f21ae5a9bd96d7241708ca283b469499
  main12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main13) -}
a6e551f5f006b4a59e772fd87536c22a
  main13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Good:"#) -}
b3acda413abd5cdc6432024bc1d85fa3
  main14 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main15) -}
dfd7c6d8b0904299d79abee48ba87f06
  main15 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (GHC.CString.unpackAppendCString# Tools.test2 Main.main_s)
                   GHC.Show.$fShow[]1) -}
68abd3806e3cabf45463dc759c62a94c
  main16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("intro.tig"#) -}
b0ad8477f229a446e2a62f5c7eb86abe
  main17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main19
                   Main.main18) -}
e8f8720162d9e6a8aa5cc1c2c216c01d
  main18 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Tools.test3
                   Main.main_s) -}
3d5a5524cbbb37d3fdae501ed33127d2
  main19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("./test/test_code"#) -}
0fa75c8498a23277fe2eec6e0d45f122
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
ec5a47071dcf13be0066b4341981b193
  main20 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main21) -}
1ab6b23c51f0693e0312bdb38ba3b853
  main21 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (GHC.CString.unpackAppendCString# Tools.test2 Main.main_s1)
                   GHC.Show.$fShow[]1) -}
f4c7cfff862d16acc4fab99ad0c75b0f
  main22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("escapa.tig"#) -}
3394d1723d294b61aea2ac527400c2ab
  main23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main19
                   Main.main24) -}
a3e89d850a7a6d617179a94292aca163
  main24 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Tools.test3
                   Main.main_s1) -}
22f4ad5fa8933212206697011df2a947
  main25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main26) -}
62e547458287016bafcffcc0d7ec7d35
  main26 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \======= Test PARSER in progress ======="#) -}
4fd51634c023e8aaea9b0ffa45924ace
  main27 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
d6605a43fd70b560fc53f31eeaec7df5
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \======= Test FIN ======="#) -}
9b6d79d0f5b537388c01366194c8676a
  main4 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Unfolding: (Tools.testBad1
                   @ Text.Parsec.Error.ParseError
                   @ TigerAbs.Exp
                   Tools.bad_loc
                   Main.main5
                     `cast`
                   (<Text.Parsec.Pos.SourceName>_R
                    ->_R Data.Functor.Identity.N:Identity[0]
                             <Data.Either.Either
                                Text.Parsec.Error.ParseError TigerAbs.Exp>_R)) -}
232966d6ba35801049ecc25e54d698dc
  main5 ::
    Text.Parsec.Pos.SourceName
    -> Data.Functor.Identity.Identity
         (Data.Either.Either Text.Parsec.Error.ParseError TigerAbs.Exp)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: Text.Parsec.Pos.SourceName) ->
                 Text.Parsec.Prim.runPT
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ TigerAbs.Exp
                   (Main.$s$fStream[]mtok @ GHC.Types.Char)
                   TigerParser.expression1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <TigerAbs.Exp>_R))
                   GHC.Tuple.()
                   s
                   s) -}
23134a6e2701484ea00d75c2f92c41bb
  main6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main7) -}
872f3812e278825254d3fa6af684aafe
  main7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bad:"#) -}
63485770dc2d9919599681d67257b9eb
  main8 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Unfolding: (Tools.testGood1
                   @ Text.Parsec.Error.ParseError
                   @ TigerAbs.Exp
                   Text.Parsec.Error.$fShowParseError
                   Tools.type_loc
                   Main.main5
                     `cast`
                   (<Text.Parsec.Pos.SourceName>_R
                    ->_R Data.Functor.Identity.N:Identity[0]
                             <Data.Either.Either
                                Text.Parsec.Error.ParseError TigerAbs.Exp>_R)) -}
ae3d05f5a2307aa986cf8c081d144ef1
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main10) -}
949a17d4724e24b28e3b00899de8c26a
  main_s :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# Main.main16) -}
57f931abf77eb71692e14c99faa95ad3
  main_s1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# Main.main22) -}
"SPEC/Main $fStream[]mtok @ Identity _" [orphan] forall @ tok
                                                        (v :: GHC.Base.Monad
                                                                Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  v
  = Main.$s$fStream[]mtok @ tok
"SPEC/Main $fStream[]mtok_$cuncons @ Identity _" [orphan] forall @ tok
                                                                 ($dMonad :: GHC.Base.Monad
                                                                               Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Main.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

